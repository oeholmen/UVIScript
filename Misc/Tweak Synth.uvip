<UVI4>
    <Program Name="Program" Bypass="0" BypassInsertFX="0" Gain="1" Pan="0" DisplayName="Tweak Synth" TransposeOctaves="0" TransposeSemiTones="0" OutputName="" Polyphony="16" NotePolyphony="0" ProgramPath="/Users/oystein/Documents/UVI/Falcon/UVIScript/Tweaksynth/Tweak Synth.uvip" LoopProgram="0" Streaming="1">
        <Mappers>
            <ControlSignalMapper Name="Mapper 0" Min="0" Max="48" Integer="0" Discrete="1" DisplayName="Semitones">0,000000 0,020833 0,041667 0,062500 0,083333 0,104167 0,125000 0,145833 0,166667 0,187500 0,208333 0,229167 0,250000 0,270833 0,291667 0,312500 0,333333 0,354167 0,375000 0,395833 0,416667 0,437500 0,458333 0,479167 0,500000 0,520833 0,541667 0,562500 0,583333 0,604167 0,625000 0,645833 0,666667 0,687500 0,708333 0,729167 0,750000 0,770833 0,791667 0,812500 0,833333 0,854167 0,875000 0,895833 0,916667 0,937500 0,958333 0,979167 1,000000</ControlSignalMapper>
            <ControlSignalMapper Name="Mapper 1" Min="-1" Max="1" Integer="0" Discrete="0" DisplayName="Bipolar Ramp">-1,000000 -0,984252 -0,968504 -0,952756 -0,937008 -0,921260 -0,905512 -0,889764 -0,874016 -0,858268 -0,842520 -0,826772 -0,811024 -0,795276 -0,779528 -0,763780 -0,748031 -0,732283 -0,716535 -0,700787 -0,685039 -0,669291 -0,653543 -0,637795 -0,622047 -0,606299 -0,590551 -0,574803 -0,559055 -0,543307 -0,527559 -0,511811 -0,496063 -0,480315 -0,464567 -0,448819 -0,433071 -0,417323 -0,401575 -0,385827 -0,370079 -0,354331 -0,338583 -0,322835 -0,307087 -0,291339 -0,275591 -0,259843 -0,244094 -0,228346 -0,212598 -0,196850 -0,181102 -0,165354 -0,149606 -0,133858 -0,118110 -0,102362 -0,086614 -0,070866 -0,055118 -0,039370 -0,023622 -0,007874 0,007874 0,023622 0,039370 0,055118 0,070866 0,086614 0,102362 0,118110 0,133858 0,149606 0,165354 0,181102 0,196850 0,212598 0,228346 0,244094 0,259843 0,275591 0,291339 0,307087 0,322835 0,338583 0,354331 0,370079 0,385827 0,401575 0,417323 0,433071 0,448819 0,464567 0,480315 0,496063 0,511811 0,527559 0,543307 0,559055 0,574803 0,590551 0,606299 0,622047 0,637795 0,653543 0,669291 0,685039 0,700787 0,716535 0,732283 0,748031 0,763780 0,779528 0,795276 0,811024 0,826772 0,842520 0,858268 0,874016 0,889764 0,905512 0,921260 0,937008 0,952756 0,968504 0,984252 1,000000</ControlSignalMapper>
            <ControlSignalMapper Name="Mapper 2" Min="0" Max="1" Integer="0" Discrete="0" DisplayName="Concave">0,000000 0,015328 0,027869 0,039536 0,050670 0,061424 0,071884 0,082105 0,092127 0,101978 0,111679 0,121248 0,130697 0,140039 0,149282 0,158435 0,167504 0,176496 0,185415 0,194266 0,203054 0,211781 0,220451 0,229067 0,237632 0,246147 0,254616 0,263041 0,271422 0,279763 0,288064 0,296327 0,304553 0,312744 0,320902 0,329026 0,337118 0,345180 0,353211 0,361214 0,369188 0,377135 0,385056 0,392950 0,400820 0,408664 0,416485 0,424283 0,432057 0,439810 0,447541 0,455250 0,462939 0,470607 0,478256 0,485885 0,493495 0,501086 0,508659 0,516215 0,523752 0,531273 0,538776 0,546263 0,553733 0,561188 0,568626 0,576050 0,583457 0,590850 0,598229 0,605592 0,612942 0,620278 0,627599 0,634907 0,642202 0,649484 0,656752 0,664008 0,671251 0,678482 0,685700 0,692907 0,700101 0,707284 0,714455 0,721614 0,728763 0,735900 0,743026 0,750141 0,757246 0,764340 0,771423 0,778496 0,785559 0,792611 0,799654 0,806687 0,813710 0,820723 0,827727 0,834722 0,841707 0,848683 0,855649 0,862607 0,869556 0,876496 0,883427 0,890350 0,897264 0,904169 0,911066 0,917955 0,924835 0,931708 0,938572 0,945428 0,952277 0,959117 0,965950 0,972775 0,979593 0,986403 0,993205 1,000000</ControlSignalMapper>
            <ControlSignalMapper Name="Mapper 3" Min="0" Max="1" Integer="0" Discrete="1" DisplayName="EightStepRamp">0,000000 0,142857 0,285714 0,428571 0,571429 0,714286 0,857143 1,000000</ControlSignalMapper>
            <ControlSignalMapper Name="Mapper 4" Min="0" Max="1" Integer="0" Discrete="0" DisplayName="Envelope">0,000000 0,387536 0,430595 0,457968 0,478439 0,494945 0,508854 0,520918 0,531599 0,541202 0,549939 0,557964 0,565393 0,572314 0,578797 0,584899 0,590665 0,596134 0,601336 0,606298 0,611044 0,615592 0,619960 0,624164 0,628214 0,632125 0,635904 0,639563 0,643108 0,646548 0,649888 0,653135 0,656295 0,659372 0,662371 0,665296 0,668151 0,670939 0,673664 0,676329 0,678937 0,681490 0,683991 0,686442 0,688845 0,691202 0,693515 0,695786 0,698016 0,700207 0,702361 0,704478 0,706561 0,708609 0,710626 0,712610 0,714565 0,716490 0,718386 0,720255 0,722098 0,723914 0,725706 0,727473 0,729217 0,730937 0,732635 0,734312 0,735967 0,737602 0,739217 0,740813 0,742390 0,743948 0,745488 0,747011 0,748516 0,750005 0,751477 0,752934 0,754375 0,755801 0,757212 0,758608 0,759990 0,761359 0,762713 0,764055 0,765383 0,766699 0,768002 0,769293 0,770572 0,771840 0,773095 0,774340 0,775573 0,776796 0,778008 0,779210 0,780401 0,781582 0,782754 0,783915 0,785067 0,786210 0,787344 0,788468 0,789584 0,790691 0,791789 0,792879 0,793961 0,795034 0,796100 0,797157 0,798207 0,799249 0,800284 0,801311 0,802331 0,803344 0,804349 0,805348 0,806340 0,807325 0,808303 0,809275 0,810241 0,811200 0,812152 0,813099 0,814039 0,814974 0,815902 0,816825 0,817742 0,818653 0,819558 0,820458 0,821353 0,822242 0,823126 0,824004 0,824877 0,825746 0,826609 0,827467 0,828320 0,829168 0,830012 0,830850 0,831684 0,832514 0,833339 0,834159 0,834975 0,835786 0,836593 0,837396 0,838194 0,838988 0,839778 0,840564 0,841346 0,842124 0,842898 0,843668 0,844434 0,845196 0,845954 0,846709 0,847459 0,848206 0,848950 0,849690 0,850426 0,851159 0,851888 0,852614 0,853336 0,854055 0,854770 0,855483 0,856192 0,856897 0,857600 0,858299 0,858995 0,859688 0,860378 0,861065 0,861748 0,862429 0,863107 0,863782 0,864453 0,865122 0,865789 0,866452 0,867112 0,867770 0,868425 0,869077 0,869726 0,870373 0,871017 0,871658 0,872297 0,872933 0,873567 0,874198 0,874826 0,875452 0,876076 0,876697 0,877316 0,877932 0,878545 0,879157 0,879766 0,880373 0,880977 0,881579 0,882179 0,882776 0,883372 0,883965 0,884555 0,885144 0,885730 0,886315 0,886897 0,887477 0,888055 0,888631 0,889204 0,889776 0,890346 0,890913 0,891479 0,892043 0,892604 0,893164 0,893722 0,894277 0,894831 0,895383 0,895933 0,896482 0,897028 0,897572 0,898115 0,898656 0,899195 0,899732 0,900267 0,900801 0,901333 0,901863 0,902392 0,902918 0,903443 0,903967 0,904488 0,905008 0,905526 0,906043 0,906558 0,907071 0,907583 0,908093 0,908602 0,909109 0,909614 0,910118 0,910620 0,911121 0,911620 0,912118 0,912614 0,913109 0,913602 0,914094 0,914584 0,915073 0,915560 0,916046 0,916530 0,917013 0,917495 0,917975 0,918454 0,918931 0,919408 0,919882 0,920355 0,920827 0,921298 0,921767 0,922235 0,922702 0,923167 0,923631 0,924094 0,924555 0,925015 0,925474 0,925932 0,926388 0,926843 0,927297 0,927750 0,928201 0,928651 0,929100 0,929548 0,929995 0,930440 0,930884 0,931327 0,931769 0,932209 0,932649 0,933087 0,933524 0,933960 0,934395 0,934829 0,935262 0,935693 0,936124 0,936553 0,936981 0,937409 0,937835 0,938260 0,938684 0,939106 0,939528 0,939949 0,940369 0,940787 0,941205 0,941621 0,942037 0,942452 0,942865 0,943278 0,943689 0,944100 0,944509 0,944918 0,945325 0,945732 0,946137 0,946542 0,946946 0,947348 0,947750 0,948151 0,948551 0,948950 0,949348 0,949745 0,950141 0,950536 0,950931 0,951324 0,951716 0,952108 0,952499 0,952889 0,953277 0,953665 0,954053 0,954439 0,954824 0,955209 0,955593 0,955975 0,956357 0,956739 0,957119 0,957498 0,957877 0,958255 0,958632 0,959008 0,959383 0,959757 0,960131 0,960504 0,960876 0,961247 0,961618 0,961987 0,962356 0,962724 0,963092 0,963458 0,963824 0,964189 0,964553 0,964916 0,965279 0,965641 0,966002 0,966362 0,966722 0,967081 0,967439 0,967797 0,968153 0,968509 0,968865 0,969219 0,969573 0,969926 0,970278 0,970630 0,970981 0,971331 0,971681 0,972029 0,972377 0,972725 0,973072 0,973418 0,973763 0,974108 0,974452 0,974795 0,975138 0,975480 0,975821 0,976162 0,976502 0,976841 0,977180 0,977518 0,977855 0,978192 0,978528 0,978863 0,979198 0,979532 0,979866 0,980199 0,980531 0,980863 0,981194 0,981524 0,981854 0,982183 0,982511 0,982839 0,983167 0,983493 0,983819 0,984145 0,984470 0,984794 0,985118 0,985441 0,985764 0,986085 0,986407 0,986728 0,987048 0,987367 0,987686 0,988005 0,988323 0,988640 0,988957 0,989273 0,989589 0,989904 0,990218 0,990532 0,990846 0,991158 0,991471 0,991782 0,992094 0,992404 0,992714 0,993024 0,993333 0,993642 0,993950 0,994257 0,994564 0,994870 0,995176 0,995481 0,995786 0,996091 0,996394 0,996698 0,997000 0,997303 0,997604 0,997906 0,998206 0,998506 0,998806 0,999105 0,999404 0,999702 1,000000</ControlSignalMapper>
            <ControlSignalMapper Name="Mapper 5" Min="0" Max="48" Integer="0" Discrete="1" DisplayName="Octaves">0,000000 0,250000 0,500000 0,750000 1,000000</ControlSignalMapper>
        </Mappers>
        <Properties description="Tweak Synth Analog 1.0

Created by: Ã˜ystein Holmen

Why Tweak Synth?

Tweak Synth was created to spark new ideas, and to trigger creativity. We can all be stuck sometimes, finding our selves following the same patterns over and over again. Tweak Synth wants to help you create something new, and it wants to help you find the best version of the sound you are trying to create.

Is Tweak Synth smart?

No. It is not smart. But if you give it patches to work with, it can create some quite interesting, and sometimes good patches, inspired by you input. Or it can create entirely on its own.

Two different flavors

The tweak synth comes in two different flavors - one wavetable and one analog. They are mostly equal, but there are some differences in modulation options, and of course, the oscillators differ. But the tweaking algorithm is shared between both synths.

Synth overview

The synth is built in Falcon, using a standard analog signal flow. There are two main oscillators, and a noise oscillator. The synth is divided into five sections: Synthesis, Filter, Modulation, Twequencer and Patchmaker. Switching between sections is done using the buttons in the top panel. In addition to this there is a mixer section directly below the top panel. The mixer section is always visible, and also features an on/off button for the arpeggiator.

Synthesis section

The synthesis section contains the oscillators for editing waveform, pitch, stereo/unison, vibrato, amp envelope and some basic effects.

Filter section

The filter section contains two filters, one lowpass 24, and a highpass filter. The filter envelope has a few different targets, in addition to both filters. There are some variations here depending on whether the wavetable or analog version is used.

Modulation section

The modulation section contains an LFO that can be assigned to a number of different targets. It is possible to override filter modulation for the noise oscillator, if this should be treated separatly. By default, the settings for the LFO is shared by all oscillators, but it is possible to use different settings for each oscillator. This option can be selected directly to the left of the waveform select menu. If a widget has different settings for each oscillator, the widget will be locked when &quot;All&quot; oscillators are selected, to avoid unintended changes.

Envelopes

By default, the settings for the envelopes are shared by all oscillators, but it is possible to use different settings for each oscillator. This option can be selected directly to the left of the attack knob. If a widget has different settings for each oscillator, the widget will be locked when &quot;All&quot; oscillators are selected, to avoid unintended changes.

Tweak Synth

The last two sections is what makes Tweak Synth different. This is where you can create new presets from presets you made, or from scratch. The two sections, Twequencer and Patchmaker, uses the same alogithm to create new patches, but they differ in approach.

Twequencer

The Twequencer is a simple sequencer that tweaks your sound as you play. Select a play mode, set a tweak level (see description below) and start playing! You can hear the changes to your sound being made in real time, and they will be changed over the duration of the step. On slow resolutions, there are more parameters being changed for each step than on fast resolutions.

As you play, the Twequencer will store a snapshot for each beat. If you hear something you like, just stop playing and select the snapshot from the step that sounded best. When you stop playing, the tweak level is set to 0 to avoid further changes. You can store a snapshot you like, and you will find it again in the Patchmaker. All stored snapshorts are saved with the UVI program, so you will get it back when you open it later.

Envelopes will be tweaked according to the resolution you choose. If a fast resolution is selected, the envelopetimes will be shorter than if a slow resolution is selected. Short envelope times can occur for slow resolutions, but long envelope times will not occur for fast resolutions.

Thee other options available will be described under &quot;Patchmaker&quot;.

Patchmaker

The patchmaker is where you create new patches instantly, with the click of a button. This is also where any snapshots you add are stored.

Snapshots

A snapshot contains the settings that were present in the current editing state when the snapshot was added. Snapshots can be added from manually created pathces as well as the ones created in twequencer and patchmaker. Most of the times you will want to do some manual changes to created patches, to make them sound the way you want, and then add them to you snapshots. Snapshots are stored with the program when it is saved. You can switch between snapshots using the menu, or the buttons. Remember that you current edit will be replaced with the settings from the selected snapshot, so remember to add or update the current edit to snaphots if you want to keep it.

Tweak level

When creating a new patch, the tweak level is you way of telling the synth how far from the original you are willing to change the sound. At tweak level 0 there will be virtually no changes made. As the tweak level rises, more changes will be introduced. At 100 the sound will be something completely new, and totally different than the original. This is an extreme setting, and will in most cases not produce any usable sounds. But it is fun to test! At sensible levels, usable sounds may be created. They will need a human touch, but can sound quite interesting right away. If you are not satisfied, just click the &quot;Tweak patch&quot; button again!

Tweak source

Selecting a tweak source will tell the synth where to get it&apos;s ideas from. If you have created some good snapshots, they can be used to create new sounds. The automatic option will use ideas from all the different sources. When &quot;Current edit&quot; is selected, remeber that the current edit will changed every time you create a new patch. So this can be a great way to introduce small changes for each iteration. Works well with the Twequencer, and at low tweak levels.

Envelope style

In the patchmaker you can select an envelope style. This is a way to control the sound being created. If you are looking for a pad type sound, create one of the long styles, and for snappier sounds, select one of the shorter versions. When set to automatic, the synth will make different envelopes every time.

Envelope style is not available in Twequencer, as this is handled by the selected resolution.

Scope

Directly below the tweak source and envelope style there are five scope buttons. Each button represents a section of the synth. When a button is selected, that section will be included when creating the patch. If no buttons are selected, no changes are made. This is useful if you only wat to change parts of the sound. If you are happy with the mix, effects and modulation, you can deselect them, and changes will only be made to the synthesis and filter sections.

Recall saved patch

This button will set the current editing state to the sound that was stored when you save the program last.

Initialize patch

Will set current editing state to only default values.

Managing snapshots

Snapshots can be added, updated or removed using this menu. To clear all snapshots, use the red button. All will be lost!

When you add the first snapshot, an initial snapshot containing the last saved state will be added automatically. So you first added snapshot will be called &quot;Snapshot 2&quot;. The initial snapshot can be updated, but it cannot be removed, unless you remove all snapshots.

Conclusion

That&apos;s it! Start creating, and hopefully you will discover some new sounds that you didn&apos;t know existed."/>
        <ControlSignalSources>
            <ConstantModulation Name="Macro 1" DisplayName="Osc 1 Shape" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="30" y="429496615"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 2" DisplayName="Filter Cutoff" Bypass="0" Bipolar="0" Style="0" Value="1">
                <Properties customPosition="0" x="125" y="429496615"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 3" DisplayName="Env Amount" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="220" y="429496615"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 4" DisplayName="LFO Freq Key Follow 2" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="315" y="429496615"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 5" DisplayName="LfoFreqKeyFollow3" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="410" y="429496615"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 6" DisplayName="LFO-&gt;Detune" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="505" y="429496615"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 7" DisplayName="LFO-&gt;WaveSpread1" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="600" y="429496615"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 8" DisplayName="Osc 1 Mix" Bypass="0" Bipolar="0" Style="0" Value="0.75">
                <Properties customPosition="0" x="30" y="858993425"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 9" DisplayName="Osc 2 Shape" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="125" y="858993425"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 10" DisplayName="Osc 2 Mix" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="220" y="858993425"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 11" DisplayName="Osc 2 Finetune" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="315" y="858993425"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 12" DisplayName="Osc 2 Pitch" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="410" y="858993425"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 13" DisplayName="Filter Res" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="505" y="858993425"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 14" DisplayName="Delay" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="600" y="858993425"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 15" DisplayName="Reverb" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="30" y="1288490235"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 16" DisplayName="Arp on/off" Bypass="0" Bipolar="1" Style="1" Value="0">
                <Properties customPosition="0" x="125" y="1288490235"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 17" DisplayName="Lfo-&gt;WaveSpread2" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="220" y="1288490235"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 18" DisplayName="LFO-&gt;NoiseLpf" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="315" y="1288490235"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 19" DisplayName="LFO-&gt;NoiseHpf" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="410" y="1288490235"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 20" DisplayName="LFO-&gt;NoiseAmp" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="505" y="1288490235"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 21" DisplayName="Chorus" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="600" y="1288490235"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 22" DisplayName="Wheel-&gt;Cutoff" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="30" y="1717987045"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 23" DisplayName="Drive" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="125" y="1717987045"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 24" DisplayName="AT-&gt;Cutoff" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="220" y="1717987045"/>
            </ConstantModulation>
            <LFO Name="LFO 1" DisplayName="Vibrato" Bypass="0" SyncToHost="0" DelayTime="0" RiseTime="0" Freq="6.1157823" Depth="1" Phase="0" WaveFormType="2" Retrigger="1" Bipolar="1" Smooth="0">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="0.34509698" Source="$Program/Macro 33" Destination="Freq" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0.60270745" SignalConnectionVersion="1"/>
                </Connections>
            </LFO>
            <ConstantModulation Name="Macro 25" DisplayName="VibratoAmount" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@ChanAfterTouch" Destination="Value" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                        <Connections>
                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 26" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                        </Connections>
                    </SignalConnection>
                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="@MIDI CC 1" Destination="Value" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                        <Connections>
                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 29" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                        </Connections>
                    </SignalConnection>
                </Connections>
                <Properties customPosition="0" x="315" y="1717987045"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 26" DisplayName="AT-&gt;Vibrato" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="410" y="1717987045"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 27" DisplayName="Osc1 LFO-&gt;PD" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="505" y="1717987045"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 28" DisplayName="Osc2 LFO-&gt;PD" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="600" y="1717987045"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 29" DisplayName="Wheel-&gt;Vibrato" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="30" y="-2147483441"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 30" DisplayName="Key Tracking" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="125" y="-2147483441"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 31" DisplayName="LFO-&gt;Cutoff" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="220" y="-2147483441"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 32" DisplayName="Unison Detune" Bypass="0" Bipolar="0" Style="0" Value="0.1">
                <Properties customPosition="0" x="315" y="-2147483441"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 33" DisplayName="Vibrato Rate" Bypass="0" Bipolar="0" Style="0" Value="0.69999999">
                <Properties customPosition="0" x="410" y="-2147483441"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 34" DisplayName="RandomPhaseStart" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="505" y="-2147483441"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 35" DisplayName="Maximizer on/off" Bypass="0" Bipolar="1" Style="1" Value="0">
                <Properties customPosition="0" x="600" y="-2147483441"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 36" DisplayName="Noise Mix" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="75" y="-1717986631"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 37" DisplayName="LFO-&gt;Amp" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="170" y="-1717986631"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 38" DisplayName="LFO-&gt;Hardsync1" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="265" y="-1717986631"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 39" DisplayName="LFO-&gt;Hardsync2" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="360" y="-1717986631"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 40" DisplayName="FilterENV-&gt;Hardsync1" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="455" y="-1717986631"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 41" DisplayName="FilterENV-&gt;Hardsync2" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="550" y="-1717986631"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 42" DisplayName="LFO Freq Key Follow 1" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="30" y="-1288489821"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 43" DisplayName="Pan Spread" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="125" y="-1288489821"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 44" DisplayName="Stereo Spread" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="220" y="-1288489821"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 45" DisplayName="Osc 1 Pitch" Bypass="0" Bipolar="1" Style="0" Value="0.5">
                <Properties customPosition="0" x="315" y="-1288489821"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 46" DisplayName="LFO-&gt;Pitch1" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="410" y="-1288489821"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 47" DisplayName="LFO-&gt;Pitch2" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="505" y="-1288489821"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 48" DisplayName="FEnv-&gt;Pitch1" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="600" y="-1288489821"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 49" DisplayName="FEnv-&gt;Pitch2" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="75" y="-858993011"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 50" DisplayName="HpfCutoff" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="170" y="-858993011"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 51" DisplayName="HpfResonance" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="265" y="-858993011"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 52" DisplayName="HpfKeyTracking" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="360" y="-858993011"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 53" DisplayName="HpfEnvAmount" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="455" y="-858993011"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 54" DisplayName="Wheel-&gt;Lpf" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="550" y="-858993011"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 55" DisplayName="AT-&gt;Lpf" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="30" y="-429496201"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 56" DisplayName="LFO-&gt;HpfCutoff" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="125" y="-429496201"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 57" DisplayName="WaveSpread" Bypass="0" Bipolar="0" Style="0" Value="0.26367188">
                <Properties customPosition="0" x="220" y="-429496201"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 58" DisplayName="Aftertouch-&gt;Hardsync1" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="315" y="-429496201"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 59" DisplayName="Wheel-&gt;Wave2" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="410" y="-429496201"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 60" DisplayName="AT-&gt;Wave1" Bypass="0" Bipolar="0" Style="0" Value="0.5">
                <Properties customPosition="0" x="505" y="-429496201"/>
            </ConstantModulation>
            <ConstantModulation Name="Macro 61" DisplayName="Macro 61" Bypass="0" Bipolar="0" Style="0" Value="0">
                <Properties customPosition="0" x="600" y="-429496201"/>
            </ConstantModulation>
        </ControlSignalSources>
        <EventProcessors>
            <ScriptProcessor Name="EventProcessor0" Bypass="0" Osc1Wave="1" Osc1StartPhase="0" Osc1Pitch="0" HardsyncOsc1="0" AtToHarsyncosc1="0" Osc2Wave="1" Osc2StartPhase="0" Osc2Pitch="0" Osc2FinePitch="0" HardsyncOsc2="0" PanSpread="0" RandomPhaseStart="0" UnisonVoices="1" UnisonDetune="0.1" StereoSpread="0" Osc1Mix="0.75" Osc2Mix="0" NoiseMix="0" NoiseTypeMenu="7" Arp="0" Cutoff="1" Resonance="0" KeyTracking="0" WheelToCutoff="0" AftertouchToCutoff="0" HPCutoff="0" HPFResonance="0" HPFKeyTracking="0" WheelToHpfCutoff="0" AftertouchToHpfCutoff="0" LfoOsc="1" WaveFormTypeMenu="3" LfoFreq="4.5" Lfo2Sync="0" Lfo2Trigger="1" LfoFreqKeyFollow="0" LfoDelay="0" LfoRise="0" LfoSmooth="0" LfoBipolar="1" LfoToNoiseLpfCutoff="0" LfoToNoiseHpfCutoff="0" LfoToNoiseAmplitude="0" LfoToNoiseOverride="0" LfoToCutoff="0" LfoToHpfCutoff="0" LfoToAmplitude="0" LfoToDetune="0" LfoToOsc1PWM="0" LfoToHardsync1="0" LfoToPitchOsc1Knob="0" LfoToOsc2PWM="0" LfoToHardsync2="0" LfoToPitchOsc2Knob="0" AmpEnvOsc="1" Attack="0.001" Decay="0.050000001" Sustain="1" Release="0.0099999998" VelocityToAmpEnv="10" FilterEnvOsc="1" FAttack="0.001" FDecay="0.050000001" FSustain="1" FRelease="0.0099999998" VelocityToFilterEnv="10" EnvelopeAmt="0" HpfEnvelopeAmt="0" FilterEnvToHardsync1Knob="0" FilterEnvToPitchOsc1="0" FilterEnvToHardsync2Knob="0" FilterEnvToPitchOsc2="0" Reverb="0" Delay="0" Chorus="0" Drive="0" Maximizer="0" VibratoDepth="0" VibratoRate="0.69999999" LfoRiseTime="0" WheelToVibrato="0" AftertouchToVibrato="0" SequencerPlay="1" Steps="16" Resolution="15" GateKnob="0.80000001" SeqTweakSource="1" SeqSynthesis="1" SeqFilter="1" SeqModulation="1" SeqMixer="1" SeqEffects="1" TweakLevel="50" PatchesMenu="1" ManagePatchesMenu="1" TweakSource="1" EnvStyle="1" Synthesis="1" Filter="1" Modulation="1" Mixer="1" Effects="1" API_version="18">
                <Properties PresetPath="" ScriptPath="./tweaksynth.lua"/>
                <script><![CDATA[--------------------------------------------------------------------------------
-- TweakSynth
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Common functions and variables for TweakSynth
--------------------------------------------------------------------------------

tweakables = {}
storedPatches = {}
storedPatch = {}
patchesMenu = nil -- Must be global so we can save patches from anywhere

--------------------------------------------------------------------------------
-- Synth engine elements
--------------------------------------------------------------------------------

-- KEYGROUPS
local osc1Keygroup = Program.layers[1].keygroups[1]
local osc2Keygroup = Program.layers[2].keygroups[1]
local noiseKeygroup = Program.layers[3].keygroups[1]

-- OSCILLATORS
osc1 = osc1Keygroup.oscillators[1]
osc2 = osc2Keygroup.oscillators[1]
noiseOsc = noiseKeygroup.oscillators[1]

-- MODULATORS
local vibratoLfo = Program.modulations["LFO 1"] -- Vibrato
local lfo1 = osc1Keygroup.modulations["LFO 1"] -- Modulation osc 1
local lfo2 = osc2Keygroup.modulations["LFO 1"] -- Modulation osc 2
local lfo3 = noiseKeygroup.modulations["LFO 1"] -- Modulation noise osc
local ampEnv1 = osc1Keygroup.modulations["Amp. Env"]
local ampEnv2 = osc2Keygroup.modulations["Amp. Env"]
local ampEnvNoise = noiseKeygroup.modulations["Amp. Env"]
local filterEnv1 = osc1Keygroup.modulations["Analog ADSR 1"]
local filterEnv2 = osc2Keygroup.modulations["Analog ADSR 1"]
local filterEnvNoise = noiseKeygroup.modulations["Analog ADSR 1"]

-- MACROS
macros = {
  Program.modulations["Macro 1"],
  Program.modulations["Macro 2"],
  Program.modulations["Macro 3"],
  Program.modulations["Macro 4"],
  Program.modulations["Macro 5"],
  Program.modulations["Macro 6"],
  Program.modulations["Macro 7"],
  Program.modulations["Macro 8"],
  Program.modulations["Macro 9"],
  Program.modulations["Macro 10"],
  Program.modulations["Macro 11"],
  Program.modulations["Macro 12"],
  Program.modulations["Macro 13"],
  Program.modulations["Macro 14"],
  Program.modulations["Macro 15"],
  Program.modulations["Macro 16"],
  Program.modulations["Macro 17"],
  Program.modulations["Macro 18"],
  Program.modulations["Macro 19"],
  Program.modulations["Macro 20"],
  Program.modulations["Macro 21"],
  Program.modulations["Macro 22"],
  Program.modulations["Macro 23"],
  Program.modulations["Macro 24"],
  Program.modulations["Macro 25"],
  Program.modulations["Macro 26"],
  Program.modulations["Macro 27"],
  Program.modulations["Macro 28"],
  Program.modulations["Macro 29"],
  Program.modulations["Macro 30"],
  Program.modulations["Macro 31"],
  Program.modulations["Macro 32"],
  Program.modulations["Macro 33"],
  Program.modulations["Macro 34"],
  Program.modulations["Macro 35"],
  Program.modulations["Macro 36"],
  Program.modulations["Macro 37"],
  Program.modulations["Macro 38"],
  Program.modulations["Macro 39"],
  Program.modulations["Macro 40"],
  Program.modulations["Macro 41"],
  Program.modulations["Macro 42"],
  Program.modulations["Macro 43"],
  Program.modulations["Macro 44"],
  Program.modulations["Macro 45"],
  Program.modulations["Macro 46"],
  Program.modulations["Macro 47"],
  Program.modulations["Macro 48"],
  Program.modulations["Macro 49"],
  Program.modulations["Macro 50"],
  Program.modulations["Macro 51"],
  Program.modulations["Macro 52"],
  Program.modulations["Macro 53"],
  Program.modulations["Macro 54"],
  Program.modulations["Macro 55"],
  Program.modulations["Macro 56"],
  Program.modulations["Macro 57"],
  Program.modulations["Macro 58"],
  Program.modulations["Macro 59"],
  Program.modulations["Macro 60"]
}

local isAnalog = osc1.type == "MinBlepGenerator"
local isWavetable = osc1.type == "Wavetable"

print("Starting Synth", osc1.type)

--------------------------------------------------------------------------------
-- Name common macros
--------------------------------------------------------------------------------

local osc1Shape = macros[1]
local filterCutoff = macros[2]
local filterEnvAmount = macros[3]
local lfoFreqKeyFollow2 = macros[4]
local lfoFreqKeyFollow3 = macros[5]
local lfoToDetune = macros[6]
local osc1Mix = macros[8]
local osc2Shape = macros[9]
local osc2Mix = macros[10]
local osc2Detune = macros[11]
local osc2Pitch = macros[12]
local filterResonance = macros[13]
local delayMix = macros[14]
local reverbMix = macros[15]
local arpeggiator = macros[16]
local lfoToNoiseLpf = macros[18]
local lfoToNoiseHpf = macros[19]
local lfoToNoiseAmp = macros[20]
local chorusMix = macros[21]
local wheelToCutoff = macros[22]
local driveAmount = macros[23]
local atToCutoff = macros[24]
local vibratoAmount = macros[25]
local atToVibrato = macros[26]
local osc1LfoToPWM = macros[27]
local osc2LfoToPWM = macros[28]
local wheelToVibrato = macros[29]
local filterKeyTracking = macros[30]
local lfoToCutoff = macros[31]
local unisonDetune = macros[32]
local vibratoRate = macros[33]
local maximizer = macros[35]
local noiseMix = macros[36]
local lfoToAmp = macros[37]
local lfoFreqKeyFollow1 = macros[42]
local panSpread = macros[43]
local stereoSpread = macros[44]
local osc1Pitch = macros[45]
local lfoToPitchOsc1 = macros[46]
local lfoToPitchOsc2 = macros[47]
local filterEnvToPitchOsc1 = macros[48]
local filterEnvToPitchOsc2 = macros[49]
local hpfCutoff = macros[50]
local hpfResonance = macros[51]
local hpfKeyTracking = macros[52]
local hpfEnvAmount = macros[53]
local wheelToHpf = macros[54]
local atToHpf = macros[55]
local lfoToHpf = macros[56]

-- Analog macros
local analogMacros = {
  randomPhaseStart = macros[34],
  lfoToHardsync1 = macros[38],
  lfoToHardsync2 = macros[39],
  filterEnvToHardsync1 = macros[40],
  filterEnvToHardsync2 = macros[41],
  atToHardsync1 = macros[58]
}

-- Wavetable macros
local wavetableMacros = {
  lfoToWaveSpread1 = macros[7],
  lfoToWaveSpread2 = macros[17],
  unisonVoices = macros[34],
  lfoToWT1 = macros[38],
  lfoToWT1 = macros[39],
  filterEnvToWT1 = macros[40],
  filterEnvToWT2 = macros[41],
  waveSpread = macros[57],
  wheelToShape1 = macros[58],
  wheelToShape2 = macros[59],
  atToShape1 = macros[60]
}

--------------------------------------------------------------------------------
-- Colours and margins
--------------------------------------------------------------------------------

local outlineColour = "#66FF0000"
bgColor = "#1a000000"
knobColour = "#99330000"
osc1Colour = outlineColour
osc2Colour = outlineColour
unisonColour = outlineColour
filterColour = outlineColour
lfoColour = outlineColour
filterEnvColour = outlineColour
ampEnvColour = outlineColour
filterEffectsColour = outlineColour
vibratoColour = outlineColour

marginX = 3 -- left/right
marginY = 2 -- top/bottom
height = 60
width = 714

--------------------------------------------------------------------------------
-- STORE / RECALL
--------------------------------------------------------------------------------

function onSave()
  local data = {}
  storedPatch = {} -- Store patch tweaks
  for i,v in ipairs(tweakables) do
    table.insert(storedPatch, {index=i,widget=v.widget.name,value=v.widget.value})
  end
  table.insert(data, storedPatch)
  if #storedPatches > 0 then
    table.insert(data, storedPatches)
  end
  print("Data stored: ", #data)
  return data
end

function onLoad(data)
  print("Loading data", #data)
  storedPatch = data[1] -- USE FOR DEFAULT VALUES
  print("storedPatch", #storedPatch)
  for i,v in ipairs(storedPatch) do
    print("Loaded: ", v.widget, v.value)
  end
  if #data > 1 then
    storedPatches = data[2]
    populatePatchesMenu()
    print("Loaded stored patches: ", #storedPatches)
  end
end

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

function populatePatchesMenu()
  for i=1,#storedPatches do
    local itemName = "Snapshot "..i
    if i == 1 then
      itemName = itemName.." (initial)"
    end
    patchesMenu:addItem(itemName)
  end
end

function gem.getRandom(min, max, factor)
  if type(min) == "number" and type(max) == "number" then
    local value = math.random(min, max)
    print("Random - value, min, max:", value, min, max)
    return value
  elseif type(min) == "number" then
    local value = math.random(min)
    print("Random - value, min:", value, min)
    return value
  end
  local value = math.random()
  print("Random:", value)
  if type(factor) == "number" then
    value = value * factor
    print("Random by factor:", value, factor)
  end
  return value
end

function gem.getRandomBoolean(probability)
  -- Default probability of getting true is 50%
  if type(probability) ~= "number" then
    probability = 50
  end
  local value = gem.getRandom(100) <= probability
  print("RandomBoolean:", value, probability)
  return value
end

-- Takes a level of uncertanty and a probability to adjust according to the following rules:
-- The level of uncertanty is between 0 and 100 (0=no uncertanty,100=totaly random)
-- If uncertanty level is high, the probability gets lower
-- If uncertanty level is low, the probability gets higher
-- At uncertanty level 50, no change is made
-- Should return a probability between 0 and 100
function getProbabilityByTweakLevel(tweakLevel, probability)
  print("Probability/TweakLevel-in:", probability, tweakLevel)

  if probability == 100 or probability == 0 or tweakLevel == 50 then
    print("Probability is 100 or 0 or tweak level is 50:", probability)
    return probability
  end

  local factor = 0.5 - tweakLevel / 100
  probability = math.floor(probability + (factor * probability))

  print("Probability-factor:", factor)
  print("Probability-out:", probability)

  return probability
end

function tweakValue(options, value, tweakLevel)
  if type(options.widget.default) ~= "number" or options.noDefaultTweak == true then
    return value
  end
  print("Tweaking value")
  -- Get widget range
  local range = options.widget.max - options.widget.min
  if type(options.defaultTweakRange) == "number" then
    range = options.defaultTweakRange
  end
  print("Value range:", range)
  -- Determine change factor - a low tweaklevel gives a small change - high tweaklevel gives bigger change
  local factor = (0.5 * gem.getRandom()) * ((tweakLevel * 1.5) / 100)
  print("Tweak factor:", factor)
  -- Set the range allowed for value adjustment
  local tweakRange = range * factor
  print("Tweakrange:", tweakRange)
  -- Check if value should be incemented or decremented
  local increment = value - tweakRange < options.widget.min
  local decrement = value + tweakRange > options.widget.max
  if increment then
    print("Incrementing to avoid out of range")
    value = value + tweakRange
  elseif decrement then
    print("Decrementing to avoid out of range")
    value = value - tweakRange
  elseif gem.getRandomBoolean() == true then
    value = value + tweakRange
  else
    value = value - tweakRange
  end
  return value
end

function getValueForTweaking(options, tweakLevel, tweakSource)
  -- Tweak the value from the stored patch (the patch that was stored the last time user saved the program)
  if tweakSource == 2 or (tweakSource == 1 and gem.getRandomBoolean(getProbabilityByTweakLevel(tweakLevel, 50)) == true) then
    for i,v in ipairs(storedPatch) do
      if v.widget == options.widget.name then
        print("Tweaking value from the last stored patch:", v.widget, v.value)
        return tweakValue(options, v.value, tweakLevel)
      end
    end
  end
  -- Or tweak the value from one of the stored patches
  if #storedPatches > 0 and (tweakSource == 3 or (tweakSource == 1 and gem.getRandomBoolean(25) == true)) then
    local index = math.random(#storedPatches)
    for i,v in ipairs(storedPatches[index]) do
      if v.widget == options.widget.name then
        print("Tweaking value from patch:", index, v.widget, v.value)
        return tweakValue(options, v.value, tweakLevel)
      end
    end
  end
  -- Or tweak the current value
  if tweakSource == 4 or (tweakSource == 1 and gem.getRandomBoolean(15) == true) then
    print("Tweaking the current value:", options.widget.value)
    return tweakValue(options, options.widget.value, tweakLevel)
  end
  -- Or tweak the default value
  local value = options.widget.default
  if tweakSource == 5 or (tweakSource == 1 and gem.getRandomBoolean(getProbabilityByTweakLevel(tweakLevel, 25))) == true then
    print("Tweaking the default value:", value)
    return tweakValue(options, value, tweakLevel)
  end
  -- Or use the default value as is
  print("Using the default value without any tweaks:", value)
  return value
end

function getEnvelopeTimeForDuration(options, duration)
  local min = options.widget.default * 10000
  local max = duration * 1000 -- 0.25 = 1/16, 0.5 = 1/8, 1 = 1/4

  if min > max then
    return options.widget.default
  end

  print("Env value min/max:", min/10000, max/10000)

  return gem.getRandom(min, max) / 10000
end

function getEnvelopeTimeByStyle(options, style)
  local index = style - 1
  local attackTimes = {{0.00025,0.0025},{0.001,0.0075},{0.005,0.025},{0.01,0.25},{0.1,0.75},{0.5,2},{1,3}}
  local releaseTimes = {{0.0025,0.01},{0.01,0.075},{0.05,0.125},{0.075,0.35},{0.1,0.75},{0.5,2},{1,3}}
  local min = attackTimes[index][1]
  local max = attackTimes[index][2]

  if options.release == true then
    min = releaseTimes[index][1]
    max = releaseTimes[index][2]
  end
  
  print("getEnvelopeTimeByStyle min/max:", min, max)
  
  return gem.getRandom(min*100000, max*100000)/100000
end

-- Tweak options:
  -- widget = the widget to tweak - the only non-optional parameter
  -- func = the function to execute for getting the value - default is getRandom
  -- factor = a factor to multiply the random value with
  -- floor = the lowest value
  -- ceiling = the highest value
  -- probability = the probability (affected by tweak level) that value is within limits (floor/ceiling) - probability is passed to any custom func
  -- zero = the probability that the value is set to 0
  -- excludeWithDuration = if ran with a duration, this widget is excluded
  -- noDefaultTweak = do not tweak the default/stored value
  -- defaultTweakRange = the range to use when tweaking default/stored value - if not provided, the full range is used
  -- default = the probability that the default/stored value is used (affected by tweak level)
  -- min = min value
  -- max = max value
  -- absoluteLimit = the highest allowed limit - used mainly for safety resons to avoid extreme levels
  -- category = the category the widget belongs to (synthesis, modulation, filter, mixer, effects)
--
-- Example: table.insert(tweakables, {widget=driveKnob,floor=0,ceiling=0.5,probability=90,zero=50})
function tweakWidget(options, tweakLevel, duration, tweakSource, envelopeStyle)
  if type(tweakLevel) ~= "number" then
    tweakLevel = 50
  end
  if type(tweakSource) ~= "number" then
    tweakSource = 1
  end
  if type(envelopeStyle) ~= "number" then
    envelopeStyle = 1
  end
  print("Tweaking widget:", options.widget.name)
  print("Tweak level:", tweakLevel)
  local startValue = options.widget.value
  local endValue = startValue
  print("Start value:", startValue)
  if type(options.func) == "function" then
    endValue = options.func(options.probability)
    print("From func:", endValue, options.probability)
  elseif type(options.zero) == "number" and gem.getRandomBoolean(getProbabilityByTweakLevel(tweakLevel, options.zero)) == true then
    -- Set to zero if probability hits
    endValue = 0
    print("Zero:", options.zero)
  elseif duration > 0 and (options.attack == true or options.release == true) then
    endValue = getEnvelopeTimeForDuration(options, duration)
    print("getEnvelopeTimeForDuration:", endValue)
  elseif envelopeStyle > 1 and (options.attack == true or options.release == true) then
    endValue = getEnvelopeTimeByStyle(options, envelopeStyle)
    print("getEnvelopeTimeByStyle:", endValue)
  elseif (tweakSource > 1 and duration > 0) or gem.getRandomBoolean(tweakLevel/2) == false or (type(options.default) == "number" and gem.getRandomBoolean(getProbabilityByTweakLevel(tweakLevel, options.default)) == true) then
    -- If tweak level is low, there is a high probability of stored/default value being used
    endValue = getValueForTweaking(options, tweakLevel, tweakSource)
    print("getValueForTweaking:", endValue)
  else
    -- Get a random value within min/max limit
    endValue = gem.getRandom(options.min, options.max, options.factor)
    -- Adjust value to within range if probability hits
    if type(options.probability) == "number" and gem.getRandomBoolean(getProbabilityByTweakLevel(tweakLevel, options.probability)) == true then
      local floor = options.widget.min -- Default floor is min
      local ceiling = options.widget.max -- Default ceiling is max
      if type(options.floor) == "number" then
        floor = options.floor
      end
      if type(options.ceiling) == "number" then
        ceiling = options.ceiling
      end
      -- Check values to avoid eternal loop
      if (ceiling - floor) < (options.widget.max / 100) then
        endValue = floor
        print("Value set to floor", floor)
      else
        print("Probability/floor/ceiling:", options.probability, floor, ceiling)
        -- Generate values until we hit the window
        local rounds = 0 -- Try ten times to get a value within the window
        while endValue < floor or endValue > ceiling do
          if rounds > 10 then
            break
          end
          endValue = gem.getRandom(options.min, options.max, options.factor)
          rounds = rounds + 1 -- Increment rounds
        end
      end
    end
    if type(options.bipolar) == "number" and gem.getRandomBoolean(getProbabilityByTweakLevel(tweakLevel, options.bipolar)) == true then
      if gem.getRandom(100) <= options.bipolar then
        endValue = -endValue
        print("Value converted to negative", options.bipolar)
      end
    end
  end
  if type(options.absoluteLimit) == "number" and type(endValue) == "number" and endValue > options.absoluteLimit then
    print("End value limited by absoluteLimit", options.absoluteLimit)
    endValue = options.absoluteLimit
  end
  -- If called without duration, type is not number, or value is unchanged, the value is updated, and function returns
  if duration == 0 or type(duration) ~= "number" or startValue == endValue or type(endValue) ~= "number" then
    options.widget.value = endValue
    print("No duration, not number or unchanged value:", endValue)
    return
  end
  local durationInMilliseconds = beat2ms(duration) * 0.9
  local millisecondsPerStep = 25
  print("Duration of change (beat):", duration)
  print("Duration of change (ms):", durationInMilliseconds)
  print("Change from/to:", startValue, endValue)
  -- diff / durationInMilliseconds
  local diff = math.max(endValue, startValue) - math.min(endValue, startValue)
  local numberOfSteps = durationInMilliseconds / millisecondsPerStep
  local changePerStep = diff / numberOfSteps
  print("Number of steps:", numberOfSteps)
  if durationInMilliseconds <= millisecondsPerStep then
    options.widget.value = endValue
    print("Short duration, skip steps:", endValue)
    return
  end
  if startValue < endValue then
    print("Increment per step:", changePerStep)
    for i = 1, numberOfSteps-1 do
      options.widget.value = options.widget.value + changePerStep
      wait(millisecondsPerStep)
    end
  else
    print("Decrement per step:", changePerStep)
    for i = 1, numberOfSteps-1 do
      options.widget.value = options.widget.value - changePerStep
      wait(millisecondsPerStep)
    end
  end
  options.widget.value = endValue
end

function getDotted(value)
  return value + (value / 2)
end

function getTriplet(value)
  return value  / 3
end

local tweakSources = {"Automatic", "Saved patch", "Stored snapshots", "Current edit", "Default value"}
local resolutions =     { 32,   24,   16,  12,    8,     6,         4,      3,       2, getTriplet(4), getDotted(1), 1, getTriplet(2), getDotted(0.5), 0.5, getTriplet(1), getDotted(0.25), 0.25,  getTriplet(0.5), getDotted(0.125), 0.125}
local resolutionNames = {"8x", "6x", "4x", "3x", "2x", "1/1 dot", "1/1", "1/2 dot", "1/2", "1/2 tri", "1/4 dot",   "1/4", "1/4 tri",   "1/8 dot",     "1/8", "1/8 tri",    "1/16 dot",      "1/16", "1/16 tri",     "1/32 dot",      "1/32"}

function getResolution(i)
  return resolutions[i]
end

function getResolutions()
  return resolutions
end

function getResolutionName(i)
  return resolutionNames[i]
end

function getResolutionNames()
  return resolutionNames
end

function formatTimeInSeconds(value)
  if value < 0.01 then
      return string.format("%0.2f ms", value*1000)
  elseif value < 0.1 then
      return string.format("%0.1f ms", value*1000)
  elseif value < 1 then
      return string.format("%0.0f ms", value*1000)
  else
      return string.format("%0.2f s", value)
  end
end

function formatGainInDb(value)
  if value == 0 then
      return "-inf"
  else
      local dB = 20 * math.log10(value)
      return string.format("%0.1f dB", dB)
  end
end

function isEqual(value1, value2)
  if type(value1) == "number" then
    value1 = string.format("%0.3f", value1)
  end
  if type(value2) == "number" then
    value2 = string.format("%0.3f", value2)
  end
  return value1 == value2
end

function percent(value)
  return string.format("%0.1f %%", (value * 100))
end

function getSyncedValue(value)
  for key, res in pairs(resolutions) do
    print(key, " -- ", res)
    if isEqual(res, value) then
      print(res, "==", value)
      return key - 1
    end
  end
  return 11
end

-- Logarithmic mapping for filter cutoff
-- Filter Max => 20000.
-- Filter Min => 20.
local filterlogmax = math.log(20000.)
local filterlogmin = math.log(20.)
local filterlogrange = filterlogmax-filterlogmin
function filterMapValue(value)
    local newValue = (value * filterlogrange) + filterlogmin
    value = math.exp(newValue)
    return value
end

--------------------------------------------------------------------------------
-- Common Panels
--------------------------------------------------------------------------------

--img = Image("resources/carbon.png")
--img = Image("resources/future.png")
--img = Image("resources/hexagons.png")
img = Image("resources/metal.png")
--img = Image("resources/particles.png")
img.pos = {0, 0}
img.alpha = 0.25

--------------------------------------------------------------------------------
-- Mixer Panel
--------------------------------------------------------------------------------

function createMixerPanel()
  local mixerPanel = Panel("Mixer")

  mixerPanel:Label("Mixer")

  local osc1MixKnob = mixerPanel:Knob("Osc1Mix", 0.75, 0, 1)
  osc1MixKnob.displayName = "Osc 1"
  osc1MixKnob.fillColour = knobColour
  osc1MixKnob.outlineColour = osc1Colour
  osc1MixKnob.changed = function(self)
    osc1Mix:setParameter("Value", self.value)
    self.displayText = formatGainInDb(self.value)
  end
  osc1MixKnob:changed()
  table.insert(tweakables, {widget=osc1MixKnob,floor=0.3,ceiling=0.75,probability=100,absoluteLimit=0.8,default=50,category="mixer"})

  local osc2MixKnob = mixerPanel:Knob("Osc2Mix", 0, 0, 1)
  osc2MixKnob.displayName = "Osc 2"
  osc2MixKnob.fillColour = knobColour
  osc2MixKnob.outlineColour = osc2Colour
  osc2MixKnob.changed = function(self)
    osc2Mix:setParameter("Value", self.value)
    self.displayText = formatGainInDb(self.value)
  end
  osc2MixKnob:changed()
  table.insert(tweakables, {widget=osc2MixKnob,floor=0.3,ceiling=0.75,probability=100,absoluteLimit=0.8,category="mixer"})

  local noiseMixKnob = mixerPanel:Knob("NoiseMix", 0, 0, 1)
  noiseMixKnob.displayName = "Noise"
  noiseMixKnob.fillColour = knobColour
  noiseMixKnob.outlineColour = osc2Colour
  noiseMixKnob.changed = function(self)
    noiseMix:setParameter("Value", self.value)
    self.displayText = formatGainInDb(self.value)
  end
  noiseMixKnob:changed()
  table.insert(tweakables, {widget=noiseMixKnob,floor=0.3,ceiling=0.75,probability=100,default=10,absoluteLimit=0.8,category="mixer"})

  local noiseTypes = {"Band", "S&H", "Static1", "Static2", "Violet", "Blue", "White", "Pink", "Brown", "Lorenz", "Rossler", "Crackle", "Logistic", "Dust", "Velvet"}
  local noiseTypeMenu = mixerPanel:Menu("NoiseTypeMenu", noiseTypes)
  noiseTypeMenu.displayName = "Noise Type"
  noiseTypeMenu.selected = 7
  noiseTypeMenu.changed = function(self)
    local value = self.value - 1
    noiseOsc:setParameter("NoiseType", value)
  end
  noiseTypeMenu:changed()
  table.insert(tweakables, {widget=noiseTypeMenu,min=#noiseTypes,category="synthesis"})

  local arpeggiatorButton = mixerPanel:OnOffButton("Arp", false)
  arpeggiatorButton.fillColour = knobColour
  arpeggiatorButton.outlineColour = filterEfectsColour
  arpeggiatorButton.size = {100,(height-15)}
  arpeggiatorButton.changed = function(self)
    local value = -1
    if self.value == true then
      value = 1
    end
    arpeggiator:setParameter("Value", value)
  end
  arpeggiatorButton:changed()

  return mixerPanel
end

--------------------------------------------------------------------------------
-- Effects Panel
--------------------------------------------------------------------------------

function createEffectsPanel()
  local effectsPanel = Panel("EffectsPanel")

  effectsPanel:Label("Effects")

  local reverbKnob = effectsPanel:Knob("Reverb", 0, 0, 1)
  reverbKnob.mapper = Mapper.Quadratic
  reverbKnob.fillColour = knobColour
  reverbKnob.outlineColour = filterEffectsColour
  reverbKnob.changed = function(self)
    reverbMix:setParameter("Value", self.value)
  end
  reverbKnob:changed()
  table.insert(tweakables, {widget=reverbKnob,floor=0.1,ceiling=0.6,probability=100,category="effects"})

  local delayKnob = effectsPanel:Knob("Delay", 0, 0, 1)
  delayKnob.mapper = Mapper.Cubic
  delayKnob.fillColour = knobColour
  delayKnob.outlineColour = filterEffectsColour
  delayKnob.changed = function(self)
    delayMix:setParameter("Value", self.value)
  end
  delayKnob:changed()
  table.insert(tweakables, {widget=delayKnob,floor=0.01,ceiling=0.6,probability=100,category="effects"})

  local chorusKnob = effectsPanel:Knob("Chorus", 0, 0, 1)
  chorusKnob.mapper = Mapper.Linear
  chorusKnob.fillColour = knobColour
  chorusKnob.outlineColour = filterEffectsColour
  chorusKnob.changed = function(self)
    chorusMix:setParameter("Value", self.value)
  end
  chorusKnob:changed()
  table.insert(tweakables, {widget=chorusKnob,floor=0.01,ceiling=0.5,probability=60,default=50,category="effects"})

  local driveKnob = effectsPanel:Knob("Drive", 0, 0, 1)
  driveKnob.mapper = Mapper.Cubic
  driveKnob.fillColour = knobColour
  driveKnob.outlineColour = filterEffectsColour
  driveKnob.changed = function(self)
    driveAmount:setParameter("Value", self.value)
  end
  driveKnob:changed()
  table.insert(tweakables, {widget=driveKnob,ceiling=0.4,probability=90,absoluteLimit=0.6,default=50,category="effects"})

  local maximizerButton = effectsPanel:OnOffButton("Maximizer", false)
  maximizerButton.fillColour = knobColour
  maximizerButton.outlineColour = filterEffectsColour
  maximizerButton.size = {100,(height-15)}
  maximizerButton.changed = function(self)
    local value = -1
    if self.value == true then
      value = 1
    end
    maximizer:setParameter("Value", value)
  end
  maximizerButton:changed()
  table.insert(tweakables, {widget=maximizerButton,func=getRandomBoolean,probability=10,excludeWithDuration=true,category="effects"})

  return effectsPanel
end

--------------------------------------------------------------------------------
-- Vibrato Panel
--------------------------------------------------------------------------------

function createVibratoPanel()
  local vibratoPanel = Panel("VibratoPanel")

  vibratoPanel:Label("Vibrato")

  local vibratoKnob = vibratoPanel:Knob("VibratoDepth", 0, 0, 1)
  vibratoKnob.displayName="Depth"
  vibratoKnob.fillColour = knobColour
  vibratoKnob.outlineColour = vibratoColour
  vibratoKnob.changed = function(self)
    vibratoAmount:setParameter("Value", self.value)
  end
  vibratoKnob:changed()
  table.insert(tweakables, {widget=vibratoKnob,ceiling=0.5,probability=60,category="synthesis"})

  local vibratoRateKnob = vibratoPanel:Knob("VibratoRate", 0.7, 0, 1)
  vibratoRateKnob.displayName="Rate"
  vibratoRateKnob.fillColour = knobColour
  vibratoRateKnob.outlineColour = vibratoColour
  vibratoRateKnob.changed = function(self)
    vibratoRate:setParameter("Value", self.value)
    if self.value < 0.2 then
      self.displayText = "Very slow"
    elseif self.value < 0.5 then
      self.displayText = "Slow"
    elseif self.value < 0.75 then
      self.displayText = "Medium"
    elseif self.value < 0.85 then
      self.displayText = "Fast"
    else
      self.displayText = "Very fast"
    end
  end
  vibratoRateKnob:changed()
  table.insert(tweakables, {widget=vibratoRateKnob,default=50,category="synthesis"})

  local vibratoRiseKnob = vibratoPanel:Knob("LfoRiseTime", 0, 0, 10)
  vibratoRiseKnob.displayName="Rise Time"
  vibratoRiseKnob.fillColour = knobColour
  vibratoRiseKnob.outlineColour = vibratoColour
  vibratoRiseKnob.mapper = Mapper.Quartic
  vibratoRiseKnob.changed = function(self)
    vibratoLfo:setParameter("RiseTime", self.value)
    self.displayText = formatTimeInSeconds(self.value)
  end
  vibratoRiseKnob:changed()
  table.insert(tweakables, {widget=vibratoRiseKnob,factor=5,default=50,category="synthesis"})

  local wheelToVibratoKnob = vibratoPanel:Knob("WheelToVibrato", 0, 0, 1)
  wheelToVibratoKnob.displayName="Modwheel"
  wheelToVibratoKnob.fillColour = knobColour
  wheelToVibratoKnob.outlineColour = vibratoColour
  wheelToVibratoKnob.changed = function(self)
    wheelToVibrato:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  wheelToVibratoKnob:changed()
  table.insert(tweakables, {widget=wheelToVibratoKnob,excludeWithDuration=true,category="synthesis"})

  local atToVibratoKnob = vibratoPanel:Knob("AftertouchToVibrato", 0, 0, 1)
  atToVibratoKnob.displayName="Aftertouch"
  atToVibratoKnob.fillColour = knobColour
  atToVibratoKnob.outlineColour = vibratoColour
  atToVibratoKnob.changed = function(self)
    atToVibrato:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  atToVibratoKnob:changed()
  table.insert(tweakables, {widget=atToVibratoKnob,excludeWithDuration=true,category="synthesis"})

  return vibratoPanel
end

--------------------------------------------------------------------------------
-- Filter Panels
--------------------------------------------------------------------------------

function createFilterPanel()  
  local filterPanel = Panel("Filter")

  filterPanel:Label("Low-pass Filter")

  local cutoffKnob = filterPanel:Knob("Cutoff", 1, 0, 1)
  cutoffKnob.fillColour = knobColour
  cutoffKnob.outlineColour = filterColour
  cutoffKnob.changed = function(self)
    filterCutoff:setParameter("Value", self.value)
    local value = filterMapValue(self.value)
    if value < 1000 then
        self.displayText = string.format("%0.1f Hz", value)
    else
        self.displayText = string.format("%0.1f kHz", value/1000.)
    end
  end
  cutoffKnob:changed()
  table.insert(tweakables, {widget=cutoffKnob,floor=0.3,ceiling=0.8,probability=75,zero=10,default=35,category="filter"})

  local filterResonanceKnob = filterPanel:Knob("Resonance", 0, 0, 1)
  filterResonanceKnob.fillColour = knobColour
  filterResonanceKnob.outlineColour = filterColour
  filterResonanceKnob.changed = function(self)
    filterResonance:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  filterResonanceKnob:changed()
  table.insert(tweakables, {widget=filterResonanceKnob,floor=0.1,ceiling=0.6,probability=10,default=30,zero=10,absoluteLimit=0.8,category="filter"})

  local filterKeyTrackingKnob = filterPanel:Knob("KeyTracking", 0, 0, 1)
  filterKeyTrackingKnob.displayName = "Key Track"
  filterKeyTrackingKnob.fillColour = knobColour
  filterKeyTrackingKnob.outlineColour = filterColour
  filterKeyTrackingKnob.changed = function(self)
    filterKeyTracking:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  filterKeyTrackingKnob:changed()
  table.insert(tweakables, {widget=filterKeyTrackingKnob,default=40,zero=50,category="filter"})

  local wheelToCutoffKnob = filterPanel:Knob("WheelToCutoff", 0, -1, 1)
  wheelToCutoffKnob.displayName = "Modwheel"
  wheelToCutoffKnob.fillColour = knobColour
  wheelToCutoffKnob.outlineColour = filterColour
  wheelToCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    wheelToCutoff:setParameter("Value", value)
    self.displayText = percent(self.value)
  end
  wheelToCutoffKnob:changed()
  table.insert(tweakables, {widget=wheelToCutoffKnob,bipolar=25,excludeWithDuration=true,category="filter"})

  local atToCutoffKnob = filterPanel:Knob("AftertouchToCutoff", 0, -1, 1)
  atToCutoffKnob.displayName = "Aftertouch"
  atToCutoffKnob.fillColour = knobColour
  atToCutoffKnob.outlineColour = filterColour
  atToCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    atToCutoff:setParameter("Value", value)
    self.displayText = percent(self.value)
  end
  atToCutoffKnob:changed()
  table.insert(tweakables, {widget=atToCutoffKnob,bipolar=25,excludeWithDuration=true,category="filter"})

  return filterPanel
end

function createHpFilterPanel()
  local hpFilterPanel = Panel("HPFilter")

  hpFilterPanel:Label("High-pass Filter")

  local hpfCutoffKnob = hpFilterPanel:Knob("HPCutoff", 0, 0, 1)
  hpfCutoffKnob.displayName = "Cutoff"
  hpfCutoffKnob.fillColour = knobColour
  hpfCutoffKnob.outlineColour = filterColour
  hpfCutoffKnob.changed = function(self)
    hpfCutoff:setParameter("Value", self.value)
    local value = filterMapValue(self.value)
    if value < 1000 then
        self.displayText = string.format("%0.1f Hz", value)
    else
        self.displayText = string.format("%0.1f kHz", value/1000.)
    end
  end
  hpfCutoffKnob:changed()
  table.insert(tweakables, {widget=hpfCutoffKnob,ceiling=0.5,probability=60,zero=60,category="filter"})

  local hpfResonanceKnob = hpFilterPanel:Knob("HPFResonance", 0, 0, 1)
  hpfResonanceKnob.displayName = "Resonance"
  hpfResonanceKnob.fillColour = knobColour
  hpfResonanceKnob.outlineColour = filterColour
  hpfResonanceKnob.changed = function(self)
    hpfResonance:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  hpfResonanceKnob:changed()
  table.insert(tweakables, {widget=hpfResonanceKnob,ceiling=0.5,probability=75,absoluteLimit=0.8,default=50,category="filter"})

  local hpfKeyTrackingKnob = hpFilterPanel:Knob("HPFKeyTracking", 0, 0, 1)
  hpfKeyTrackingKnob.displayName = "Key Track"
  hpfKeyTrackingKnob.fillColour = knobColour
  hpfKeyTrackingKnob.outlineColour = filterColour
  hpfKeyTrackingKnob.changed = function(self)
    hpfKeyTracking:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  hpfKeyTrackingKnob:changed()
  table.insert(tweakables, {widget=hpfKeyTrackingKnob,category="filter"})

  local wheelToHpfCutoffKnob = hpFilterPanel:Knob("WheelToHpfCutoff", 0, -1, 1)
  wheelToHpfCutoffKnob.displayName = "Modwheel"
  wheelToHpfCutoffKnob.fillColour = knobColour
  wheelToHpfCutoffKnob.outlineColour = filterColour
  wheelToHpfCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    wheelToHpf:setParameter("Value", value)
    self.displayText = percent(self.value)
  end
  wheelToHpfCutoffKnob:changed()
  table.insert(tweakables, {widget=wheelToHpfCutoffKnob,bipolar=25,excludeWithDuration=true,category="filter"})

  local atToHpfCutoffKnob = hpFilterPanel:Knob("AftertouchToHpfCutoff", 0, -1, 1)
  atToHpfCutoffKnob.displayName = "Aftertouch"
  atToHpfCutoffKnob.fillColour = knobColour
  atToHpfCutoffKnob.outlineColour = filterColour
  atToHpfCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    atToHpf:setParameter("Value", value)
    self.displayText = percent(self.value)
  end
  atToHpfCutoffKnob:changed()
  table.insert(tweakables, {widget=atToHpfCutoffKnob,bipolar=25,excludeWithDuration=true,category="filter"})

  return hpFilterPanel
end

function createFilterEnvPanel()
  local filterEnvPanel = Panel("FilterEnv")

  local activeFilterEnvOsc = 1
  local filterEnvMenu = filterEnvPanel:Menu("FilterEnvOsc", {"All", "Osc 1", "Osc 2", "Noise Osc"})
  filterEnvMenu.displayName = "Filter Envelope"

  local filterAttackKnob = filterEnvPanel:Knob("FAttack", 0.001, 0, 10)
  filterAttackKnob.displayName="Attack"
  filterAttackKnob.fillColour = knobColour
  filterAttackKnob.outlineColour = filterEnvColour
  filterAttackKnob.mapper = Mapper.Quartic
  filterAttackKnob.changed = function(self)
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 2 then
      filterEnv1:setParameter("AttackTime", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 3 then
      filterEnv2:setParameter("AttackTime", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 4 then
      filterEnvNoise:setParameter("AttackTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  filterAttackKnob:changed()
  table.insert(tweakables, {widget=filterAttackKnob,attack=true,floor=0.001,ceiling=0.01,probability=85,default=35,defaultTweakRange=3,category="filter"})

  local filterDecayKnob = filterEnvPanel:Knob("FDecay", 0.050, 0, 10)
  filterDecayKnob.displayName="Decay"
  filterDecayKnob.fillColour = knobColour
  filterDecayKnob.outlineColour = filterEnvColour
  filterDecayKnob.mapper = Mapper.Quartic
  filterDecayKnob.changed = function(self)
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 2 then
      filterEnv1:setParameter("DecayTime", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 3 then
      filterEnv2:setParameter("DecayTime", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 4 then
      filterEnvNoise:setParameter("DecayTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  filterDecayKnob:changed()
  table.insert(tweakables, {widget=filterDecayKnob,factor=3,floor=0.01,ceiling=0.5,probability=50,default=25,category="filter"})

  local filterSustainKnob = filterEnvPanel:Knob("FSustain", 1, 0, 1)
  filterSustainKnob.displayName="Sustain"
  filterSustainKnob.fillColour = knobColour
  filterSustainKnob.outlineColour = filterEnvColour
  filterSustainKnob.changed = function(self)
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 2 then
      filterEnv1:setParameter("SustainLevel", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 3 then
      filterEnv2:setParameter("SustainLevel", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 4 then
      filterEnvNoise:setParameter("SustainLevel", self.value)
    end
    self.displayText = percent(self.value)
  end
  filterSustainKnob:changed()
  table.insert(tweakables, {widget=filterSustainKnob,floor=0.1,ceil=0.9,probability=90,default=12,zero=2,category="filter"})

  local filterReleaseKnob = filterEnvPanel:Knob("FRelease", 0.010, 0, 10)
  filterReleaseKnob.displayName="Release"
  filterReleaseKnob.fillColour = knobColour
  filterReleaseKnob.outlineColour = filterEnvColour
  filterReleaseKnob.mapper = Mapper.Quartic
  filterReleaseKnob.changed = function(self)
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 2 then
      filterEnv1:setParameter("ReleaseTime", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 3 then
      filterEnv2:setParameter("ReleaseTime", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 4 then
      filterEnvNoise:setParameter("ReleaseTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  filterReleaseKnob:changed()
  table.insert(tweakables, {widget=filterReleaseKnob,release=true,factor=5,floor=0.01,ceiling=0.8,probability=70,default=35,defaultTweakRange=5,category="filter"})

  local filterVelocityKnob = filterEnvPanel:Knob("VelocityToFilterEnv", 10, 0, 40)
  filterVelocityKnob.displayName="Velocity"
  filterVelocityKnob.fillColour = knobColour
  filterVelocityKnob.outlineColour = filterEnvColour
  filterVelocityKnob.changed = function(self)
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 2 then
      filterEnv1:setParameter("DynamicRange", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 3 then
      filterEnv2:setParameter("DynamicRange", self.value)
    end
    if activeFilterEnvOsc == 1 or activeFilterEnvOsc == 4 then
      filterEnvNoise:setParameter("DynamicRange", self.value)
    end
  end
  filterVelocityKnob:changed()
  table.insert(tweakables, {widget=filterVelocityKnob,min=40,category="filter"})

  function setFilterEnvKnob(knob, param)
    if activeFilterEnvOsc == 1 then
      knob.enabled = isEqual(filterEnv1:getParameter(param), filterEnv2:getParameter(param)) and isEqual(filterEnv2:getParameter(param), filterEnvNoise:getParameter(param))
      return
    end
    local value
    if activeFilterEnvOsc == 2 then
      value = filterEnv1:getParameter(param)
    elseif activeFilterEnvOsc == 3 then
      value = filterEnv2:getParameter(param)
    elseif activeFilterEnvOsc == 4 then
      value = filterEnvNoise:getParameter(param)
    end
    knob:setValue(value)
    print("setFilterEnvKnob:setValue:", param, value)
    knob.enabled = true
  end

  filterEnvMenu.changed = function(self)
    -- STORE ACTIVE OSCILLATOR
    activeFilterEnvOsc = self.value
    -- SET KNOB VALUES
    setFilterEnvKnob(filterAttackKnob, "AttackTime")
    setFilterEnvKnob(filterDecayKnob, "DecayTime")
    setFilterEnvKnob(filterSustainKnob, "SustainLevel")
    setFilterEnvKnob(filterReleaseKnob, "ReleaseTime")
    setFilterEnvKnob(filterVelocityKnob, "DynamicRange")
  end
  filterEnvMenu:changed()

  return filterEnvPanel
end

function createFilterEnvTargetsPanel()
  local filterEnvTargetsPanel = Panel("FilterEnvTargets")

  filterEnvTargetsPanel:Label("Targets")

  local envAmtKnob = filterEnvTargetsPanel:Knob("EnvelopeAmt", 0, -1, 1)
  envAmtKnob.displayName = "LP-Filter"
  envAmtKnob.fillColour = knobColour
  envAmtKnob.outlineColour = filterColour
  envAmtKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    filterEnvAmount:setParameter("Value", value)
    self.displayText = percent(self.value)
  end
  envAmtKnob:changed()
  table.insert(tweakables, {widget=envAmtKnob,bipolar=25,category="filter"})

  local hpfEnvAmtKnob = filterEnvTargetsPanel:Knob("HpfEnvelopeAmt", 0, -1, 1)
  hpfEnvAmtKnob.displayName = "HP-Filter"
  hpfEnvAmtKnob.fillColour = knobColour
  hpfEnvAmtKnob.outlineColour = filterColour
  hpfEnvAmtKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    hpfEnvAmount:setParameter("Value", value)
    self.displayText = percent(self.value)
  end
  hpfEnvAmtKnob:changed()
  table.insert(tweakables, {widget=hpfEnvAmtKnob,bipolar=25,category="filter"})

  return filterEnvTargetsPanel
end

--------------------------------------------------------------------------------
-- Amp Env Panel
--------------------------------------------------------------------------------

function createAmpEnvPanel()
  local ampEnvPanel = Panel("ampEnv1")

  local activeAmpEnvOsc = 1
  local ampEnvMenu = ampEnvPanel:Menu("AmpEnvOsc", {"All", "Osc 1", "Osc 2", "Noise Osc"})
  ampEnvMenu.displayName = "Amp Envelope"

  local ampAttackKnob = ampEnvPanel:Knob("Attack", 0.001, 0, 10)
  ampAttackKnob.fillColour = knobColour
  ampAttackKnob.outlineColour = ampEnvColour
  ampAttackKnob.mapper = Mapper.Quartic
  ampAttackKnob.changed = function(self)
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 2 then
      ampEnv1:setParameter("AttackTime", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 3 then
      ampEnv2:setParameter("AttackTime", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 4 then
      ampEnvNoise:setParameter("AttackTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  ampAttackKnob:changed()
  table.insert(tweakables, {widget=ampAttackKnob,attack=true,floor=0.001,ceiling=0.01,probability=85,default=50,defaultTweakRange=0.1,category="synthesis"})

  local ampDecayKnob = ampEnvPanel:Knob("Decay", 0.050, 0, 10)
  ampDecayKnob.fillColour = knobColour
  ampDecayKnob.outlineColour = ampEnvColour
  ampDecayKnob.mapper = Mapper.Quartic
  ampDecayKnob.changed = function(self)
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 2 then
      ampEnv1:setParameter("DecayTime", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 3 then
      ampEnv2:setParameter("DecayTime", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 4 then
      ampEnvNoise:setParameter("DecayTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  ampDecayKnob:changed()
  table.insert(tweakables, {widget=ampDecayKnob,factor=3,floor=0.01,ceiling=0.5,probability=50,default=25,category="synthesis"})

  local ampSustainKnob = ampEnvPanel:Knob("Sustain", 1, 0, 1)
  ampSustainKnob.fillColour = knobColour
  ampSustainKnob.outlineColour = ampEnvColour
  ampSustainKnob.changed = function(self)
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 2 then
      ampEnv1:setParameter("SustainLevel", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 3 then
      ampEnv2:setParameter("SustainLevel", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 4 then
      ampEnvNoise:setParameter("SustainLevel", self.value)
    end
    self.displayText = percent(self.value)
  end
  ampSustainKnob:changed()
  table.insert(tweakables, {widget=ampSustainKnob,floor=0.3,ceil=0.9,probability=80,default=60,zero=2,category="synthesis"})

  local ampReleaseKnob = ampEnvPanel:Knob("Release", 0.010, 0, 10)
  ampReleaseKnob.fillColour = knobColour
  ampReleaseKnob.outlineColour = ampEnvColour
  ampReleaseKnob.mapper = Mapper.Quartic
  ampReleaseKnob.changed = function(self)
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 2 then
      ampEnv1:setParameter("ReleaseTime", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 3 then
      ampEnv2:setParameter("ReleaseTime", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 4 then
      ampEnvNoise:setParameter("ReleaseTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  ampReleaseKnob:changed()
  table.insert(tweakables, {widget=ampReleaseKnob,release=true,factor=5,floor=0.01,ceiling=0.8,probability=80,default=50,defaultTweakRange=1,category="synthesis"})

  local ampVelocityKnob = ampEnvPanel:Knob("VelocityToAmpEnv", 10, 0, 40)
  ampVelocityKnob.displayName="Velocity"
  ampVelocityKnob.fillColour = knobColour
  ampVelocityKnob.outlineColour = ampEnvColour
  ampVelocityKnob.changed = function(self)
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 2 then
      ampEnv1:setParameter("DynamicRange", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 3 then
      ampEnv2:setParameter("DynamicRange", self.value)
    end
    if activeAmpEnvOsc == 1 or activeAmpEnvOsc == 4 then
      ampEnvNoise:setParameter("DynamicRange", self.value)
    end
  end
  ampVelocityKnob:changed()
  table.insert(tweakables, {widget=ampVelocityKnob,min=40,category="synthesis"})

  function setAmpEnvKnob(knob, param)
    if activeAmpEnvOsc == 1 then
      knob.enabled = isEqual(ampEnv1:getParameter(param), ampEnv2:getParameter(param)) and isEqual(ampEnv2:getParameter(param), ampEnvNoise:getParameter(param))
      return
    end
    local value
    if activeAmpEnvOsc == 2 then
      value = ampEnv1:getParameter(param)
    elseif activeAmpEnvOsc == 3 then
      value = ampEnv2:getParameter(param)
    elseif activeAmpEnvOsc == 4 then
      value = ampEnvNoise:getParameter(param)
    end
    knob:setValue(value)
    print("setAmpEnvKnob:setValue:", param, value)
    knob.enabled = true
  end

  ampEnvMenu.changed = function(self)
    -- STORE ACTIVE OSCILLATOR
    activeAmpEnvOsc = self.value
    -- SET KNOB VALUES
    setAmpEnvKnob(ampAttackKnob, "AttackTime")
    setAmpEnvKnob(ampDecayKnob, "DecayTime")
    setAmpEnvKnob(ampSustainKnob, "SustainLevel")
    setAmpEnvKnob(ampReleaseKnob, "ReleaseTime")
    setAmpEnvKnob(ampVelocityKnob, "DynamicRange")
  end
  ampEnvMenu:changed()

  return ampEnvPanel
end

--------------------------------------------------------------------------------
-- Lfo Panel
--------------------------------------------------------------------------------

function createLfoPanel()
  local lfoPanel = Panel("LFO")

  local activeLfoOsc = 1

  local lfoMenu = lfoPanel:Menu("LfoOsc", {"All", "Osc 1", "Osc 2", "Noise Osc"})
  lfoMenu.displayName = "LFO"

  local waveFormTypes = {"Sinus", "Square", "Triangle", "Ramp Up", "Ramp Down", "Analog Square", "S&H", "Chaos Lorenz", "Chaos Rossler"}
  local waveFormTypeMenu = lfoPanel:Menu("WaveFormTypeMenu", waveFormTypes)
  waveFormTypeMenu.displayName = "Waveform"
  waveFormTypeMenu.selected = 3
  waveFormTypeMenu.changed = function(self)
    local value = self.value - 1
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfo1:setParameter("WaveFormType", value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfo2:setParameter("WaveFormType", value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfo3:setParameter("WaveFormType", value)
    end
  end
  waveFormTypeMenu:changed()
  table.insert(tweakables, {widget=waveFormTypeMenu,min=#waveFormTypes,category="modulation"})

  local lfoFreqKnob = lfoPanel:Knob("LfoFreq", 4.5, 0.1, 20.)
  lfoFreqKnob.displayName = "Freq"
  lfoFreqKnob.fillColour = knobColour
  lfoFreqKnob.outlineColour = lfoColour

  local lfo2SyncButton = lfoPanel:OnOffButton("Lfo2Sync", false)
  lfo2SyncButton.displayName = "Sync"
  lfo2SyncButton.fillColour = knobColour
  lfo2SyncButton.outlineColour = lfoColour
  lfo2SyncButton.width = 75
  lfo2SyncButton.changed = function(self)
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfo1:setParameter("SyncToHost", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfo2:setParameter("SyncToHost", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfo3:setParameter("SyncToHost", self.value)
    end
    if self.value == false then
      lfoFreqKnob.default = 4.5
      lfoFreqKnob.mapper = Mapper.Quadratic
      lfoFreqKnob.changed = function(self)
        if activeLfoOsc == 1 or activeLfoOsc == 2 then
          lfo1:setParameter("Freq", self.value)
        end
        if activeLfoOsc == 1 or activeLfoOsc == 3 then
          lfo2:setParameter("Freq", self.value)
        end
        if activeLfoOsc == 1 or activeLfoOsc == 4 then
          lfo3:setParameter("Freq", self.value)
        end
        self.displayText = string.format("%0.2f Hz", self.value)
      end
      lfoFreqKnob:changed()
    else
      lfoFreqKnob.default = 11
      lfoFreqKnob.mapper = Mapper.Linear
      lfoFreqKnob.changed = function(self)
        local index = math.floor(self.value) + 1
        if activeLfoOsc == 1 or activeLfoOsc == 2 then
          lfo1:setParameter("Freq", getResolution(index))
        end
        if activeLfoOsc == 1 or activeLfoOsc == 3 then
          lfo2:setParameter("Freq", getResolution(index))
        end
        if activeLfoOsc == 1 or activeLfoOsc == 4 then
          lfo3:setParameter("Freq", getResolution(index))
        end
        self.displayText = getResolutionName(index)
      end
      lfoFreqKnob:changed()
    end
  end
  lfo2SyncButton:changed()
  table.insert(tweakables, {widget=lfo2SyncButton,func=getRandomBoolean,category="modulation"})

  table.insert(tweakables, {widget=lfoFreqKnob,factor=20,category="modulation"})

  local lfo2TriggerButton = lfoPanel:OnOffButton("Lfo2Trigger", true)
  lfo2TriggerButton.fillColour = knobColour
  lfo2TriggerButton.outlineColour = lfoColour
  lfo2TriggerButton.width = 75
  lfo2TriggerButton.position = {lfo2SyncButton.x,25}
  lfo2TriggerButton.displayName = "Retrigger"
  lfo2TriggerButton.changed = function(self)
    local mode = 1
    if (self.value == false) then
      mode = 3
    end
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfo1:setParameter("Retrigger", mode)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfo2:setParameter("Retrigger", mode)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfo3:setParameter("Retrigger", mode)
    end
  end
  lfo2TriggerButton:changed()
  table.insert(tweakables, {widget=lfo2TriggerButton,func=getRandomBoolean,category="modulation"})

  local lfoFreqKeyFollowKnob = lfoPanel:Knob("LfoFreqKeyFollow", 0, 0, 1)
  lfoFreqKeyFollowKnob.displayName = "Key Track"
  lfoFreqKeyFollowKnob.fillColour = knobColour
  lfoFreqKeyFollowKnob.outlineColour = lfoColour
  lfoFreqKeyFollowKnob.changed = function(self)
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfoFreqKeyFollow1:setParameter("Value", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfoFreqKeyFollow2:setParameter("Value", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfoFreqKeyFollow3:setParameter("Value", self.value)
    end
    self.displayText = percent(self.value)
  end
  lfoFreqKeyFollowKnob:changed()
  table.insert(tweakables, {widget=lfoFreqKeyFollowKnob,ceiling=0.5,probability=50,default=15,zero=75,category="modulation"})

  local lfoDelayKnob = lfoPanel:Knob("LfoDelay", 0, 0, 10)
  lfoDelayKnob.displayName="Delay"
  lfoDelayKnob.fillColour = knobColour
  lfoDelayKnob.outlineColour = lfoColour
  lfoDelayKnob.mapper = Mapper.Quartic
  lfoDelayKnob.x = lfoMenu.width + 15
  lfoDelayKnob.y = lfoMenu.height + 15
  lfoDelayKnob.changed = function(self)
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfo1:setParameter("DelayTime", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfo2:setParameter("DelayTime", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfo3:setParameter("DelayTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  lfoDelayKnob:changed()
  table.insert(tweakables, {widget=lfoDelayKnob,factor=5,ceiling=2,probability=50,default=35,zero=50,category="modulation"})

  local lfoRiseKnob = lfoPanel:Knob("LfoRise", 0, 0, 10)
  lfoRiseKnob.displayName="Rise"
  lfoRiseKnob.fillColour = knobColour
  lfoRiseKnob.outlineColour = lfoColour
  lfoRiseKnob.mapper = Mapper.Quartic
  lfoRiseKnob.x = lfoDelayKnob.x + lfoDelayKnob.width + 15
  lfoRiseKnob.y = lfoDelayKnob.y
  lfoRiseKnob.changed = function(self)
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfo1:setParameter("RiseTime", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfo2:setParameter("RiseTime", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfo3:setParameter("RiseTime", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  lfoRiseKnob:changed()
  table.insert(tweakables, {widget=lfoRiseKnob,factor=5,ceiling=2,probability=50,default=35,zero=50,category="modulation"})

  local lfoSmoothKnob = lfoPanel:Knob("LfoSmooth", 0, 0, 1)
  lfoSmoothKnob.displayName="Smooth"
  lfoSmoothKnob.fillColour = knobColour
  lfoSmoothKnob.outlineColour = lfoColour
  lfoSmoothKnob.mapper = Mapper.Quartic
  lfoSmoothKnob.x = lfoRiseKnob.x + lfoRiseKnob.width + 15
  lfoSmoothKnob.y = lfoRiseKnob.y
  lfoSmoothKnob.changed = function(self)
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfo1:setParameter("Smooth", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfo2:setParameter("Smooth", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfo3:setParameter("Smooth", self.value)
    end
    self.displayText = formatTimeInSeconds(self.value)
  end
  lfoSmoothKnob:changed()
  table.insert(tweakables, {widget=lfoSmoothKnob,ceiling=0.3,default=50,zero=70,category="modulation"})

  local lfoBipolarButton = lfoPanel:OnOffButton("LfoBipolar", true)
  lfoBipolarButton.fillColour = knobColour
  lfoBipolarButton.outlineColour = lfoColour
  lfoBipolarButton.width = 75
  lfoBipolarButton.x = lfoSmoothKnob.x + lfoSmoothKnob.width + 15
  lfoBipolarButton.y = lfoSmoothKnob.y
  lfoBipolarButton.displayName = "Bipolar"
  lfoBipolarButton.changed = function(self)
    if activeLfoOsc == 1 or activeLfoOsc == 2 then
      lfo1:setParameter("Bipolar", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 3 then
      lfo2:setParameter("Bipolar", self.value)
    end
    if activeLfoOsc == 1 or activeLfoOsc == 4 then
      lfo3:setParameter("Bipolar", self.value)
    end
  end
  lfoBipolarButton:changed()
  table.insert(tweakables, {widget=lfoBipolarButton,func=getRandomBoolean,probability=75,category="modulation"})

  function setLfoWidgetValue(widget, param, params)
    if activeLfoOsc == 1 then
      widget.enabled = isEqual(params[1]:getParameter(param), params[2]:getParameter(param)) and isEqual(params[2]:getParameter(param), params[3]:getParameter(param))
      return
    end
    local value
    if activeLfoOsc == 2 then
      value = params[1]:getParameter(param)
    elseif activeLfoOsc == 3 then
      value = params[2]:getParameter(param)
    elseif activeLfoOsc == 4 then
      value = params[3]:getParameter(param)
    end
    if param == "WaveFormType" then
      value = value + 1
    elseif param == "Retrigger" then
      value = value == 1
    elseif param == "Freq" then
      if activeLfoOsc == 2 and params[1]:getParameter("SyncToHost") == true then
        value = getSyncedValue(value)
      elseif activeLfoOsc == 3 and params[2]:getParameter("SyncToHost") == true then
        value = getSyncedValue(value)
      elseif activeLfoOsc == 4 and params[3]:getParameter("SyncToHost") == true then
        value = getSyncedValue(value)
      end
    end
    widget:setValue(value)
    print("setLfoWidgetValue:setValue:", param, value)
    widget.enabled = true
  end

  lfoMenu.changed = function(self)
    -- STORE THE ACTIVE OSCILLATOR
    activeLfoOsc = self.value -- 1 = all oscillators
    --print("LFO - Active oscillator changed:", activeLfoOsc, self.selectedText)
    -- SET LFO WIDGET VALUES PER OSCILLATOR
    local params = {lfo1, lfo2, lfo3}
    setLfoWidgetValue(waveFormTypeMenu, "WaveFormType", params)
    setLfoWidgetValue(lfoDelayKnob, "DelayTime", params)
    setLfoWidgetValue(lfoRiseKnob, "RiseTime", params)
    setLfoWidgetValue(lfo2SyncButton, "SyncToHost", params)
    setLfoWidgetValue(lfo2TriggerButton, "Retrigger", params)
    setLfoWidgetValue(lfoFreqKnob, "Freq", params)
    setLfoWidgetValue(lfoBipolarButton, "Bipolar", params)
    setLfoWidgetValue(lfoSmoothKnob, "Smooth", params)
    setLfoWidgetValue(lfoFreqKeyFollowKnob, "Value", {lfoFreqKeyFollow1, lfoFreqKeyFollow2, lfoFreqKeyFollow3})
  end
  lfoMenu:changed()

  return lfoPanel
end

local lfoNoiseOscOverride = false

function createLfoTargetPanel3()
  local lfoTargetPanel3 = Panel("LfoTargetPanel3")
  lfoTargetPanel3:Label("Noise Osc")

  local lfoToNoiseLpfCutoffKnob = lfoTargetPanel3:Knob("LfoToNoiseLpfCutoff", 0, -1, 1)
  lfoToNoiseLpfCutoffKnob.displayName = "LP-Filter"
  lfoToNoiseLpfCutoffKnob.fillColour = knobColour
  lfoToNoiseLpfCutoffKnob.outlineColour = lfoColour
  lfoToNoiseLpfCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    lfoToNoiseLpf:setParameter("Value", value)
    self.displayText = percent(self.value)
  end

  local lfoToNoiseHpfCutoffKnob = lfoTargetPanel3:Knob("LfoToNoiseHpfCutoff", 0, -1, 1)
  lfoToNoiseHpfCutoffKnob.displayName = "HP-Filter"
  lfoToNoiseHpfCutoffKnob.fillColour = knobColour
  lfoToNoiseHpfCutoffKnob.outlineColour = lfoColour
  lfoToNoiseHpfCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    lfoToNoiseHpf:setParameter("Value", value)
    self.displayText = percent(self.value)
  end

  local lfoToNoiseAmpKnob = lfoTargetPanel3:Knob("LfoToNoiseAmplitude", 0, -1, 1)
  lfoToNoiseAmpKnob.displayName = "Amplitude"
  lfoToNoiseAmpKnob.fillColour = knobColour
  lfoToNoiseAmpKnob.outlineColour = lfoColour
  lfoToNoiseAmpKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    lfoToNoiseAmp:setParameter("Value", value)
    self.displayText = percent(self.value)
  end

  local lfoToNoiseOverrideButton = lfoTargetPanel3:OnOffButton("LfoToNoiseOverride", lfoNoiseOscOverride)
  lfoToNoiseOverrideButton.displayName = "Override"
  lfoToNoiseOverrideButton.changed = function (self)
    lfoNoiseOscOverride = self.value
    lfoToNoiseLpfCutoffKnob.enabled = lfoNoiseOscOverride
    lfoToNoiseLpfCutoffKnob:changed()
    lfoToNoiseHpfCutoffKnob.enabled = lfoNoiseOscOverride
    lfoToNoiseHpfCutoffKnob:changed()
    lfoToNoiseAmpKnob.enabled = lfoNoiseOscOverride
    lfoToNoiseAmpKnob:changed()
    if (lfoNoiseOscOverride == false) then
      lfoToNoiseLpf:setParameter("Value", lfoToCutoff:getParameter("Value"))
      lfoToNoiseHpf:setParameter("Value", lfoToHpf:getParameter("Value"))
      lfoToNoiseAmp:setParameter("Value", lfoToAmp:getParameter("Value"))
    end
  end
  lfoToNoiseOverrideButton:changed()

  table.insert(tweakables, {widget=lfoToNoiseOverrideButton,func=getRandomBoolean,probability=25,category="modulation"})
  table.insert(tweakables, {widget=lfoToNoiseAmpKnob,bipolar=25,category="modulation"})
  table.insert(tweakables, {widget=lfoToNoiseHpfCutoffKnob,bipolar=25,category="modulation"})
  table.insert(tweakables, {widget=lfoToNoiseLpfCutoffKnob,bipolar=25,category="modulation"})

  return lfoTargetPanel3
end

function createLfoTargetPanel()
  local lfoTargetPanel = Panel("LfoTargetPanel")
  lfoTargetPanel:Label("Targets")

  local lfoToCutoffKnob = lfoTargetPanel:Knob("LfoToCutoff", 0, -1, 1)
  lfoToCutoffKnob.displayName = "LP-Filter"
  lfoToCutoffKnob.fillColour = knobColour
  lfoToCutoffKnob.outlineColour = lfoColour
  lfoToCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    lfoToCutoff:setParameter("Value", value)
    if lfoNoiseOscOverride == false then
      lfoToNoiseLpf:setParameter("Value", value)
    end
    self.displayText = percent(self.value)
  end
  lfoToCutoffKnob:changed()

  local lfoToHpfCutoffKnob = lfoTargetPanel:Knob("LfoToHpfCutoff", 0, -1, 1)
  lfoToHpfCutoffKnob.displayName = "HP-Filter"
  lfoToHpfCutoffKnob.fillColour = knobColour
  lfoToHpfCutoffKnob.outlineColour = lfoColour
  lfoToHpfCutoffKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    lfoToHpf:setParameter("Value", value)
    if lfoNoiseOscOverride == false then
      lfoToNoiseHpf:setParameter("Value", value)
    end
    self.displayText = percent(self.value)
  end
  lfoToHpfCutoffKnob:changed()

  local lfoToAmpKnob = lfoTargetPanel:Knob("LfoToAmplitude", 0, -1, 1)
  lfoToAmpKnob.displayName = "Amplitude"
  lfoToAmpKnob.fillColour = knobColour
  lfoToAmpKnob.outlineColour = lfoColour
  lfoToAmpKnob.changed = function(self)
    local value = (self.value + 1) * 0.5
    lfoToAmp:setParameter("Value", value)
    if lfoNoiseOscOverride == false then
      lfoToNoiseAmp:setParameter("Value", value)
    end
    self.displayText = percent(self.value)
  end
  lfoToAmpKnob:changed()

  local lfoToDetuneKnob = lfoTargetPanel:Knob("LfoToDetune", 0, 0, 1)
  lfoToDetuneKnob.displayName = "Detune"
  lfoToDetuneKnob.fillColour = knobColour
  lfoToDetuneKnob.outlineColour = lfoColour
  lfoToDetuneKnob.changed = function(self)
    lfoToDetune:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  lfoToDetuneKnob:changed()

  table.insert(tweakables, {widget=lfoToDetuneKnob,default=25,ceiling=0.25,probability=30,category="modulation"})
  table.insert(tweakables, {widget=lfoToAmpKnob,bipolar=25,default=30,ceiling,category="modulation"})
  table.insert(tweakables, {widget=lfoToHpfCutoffKnob,bipolar=25,default=30,category="modulation"})
  table.insert(tweakables, {widget=lfoToCutoffKnob,bipolar=25,default=30,category="modulation"})

  return lfoTargetPanel
end

--------------------------------------------------------------------------------
-- Tweak Panel
--------------------------------------------------------------------------------

function createPatchMakerPanel()
  --local bgColor = "#00000000"
  local tweakPanel = Panel("Tweaks")
  tweakPanel.backgroundColour = bgColor
  tweakPanel.x = marginX
  tweakPanel.y = height * 1.6
  tweakPanel.width = width
  tweakPanel.height = 380

  local tweakLevelKnob = tweakPanel:Knob("TweakLevel", 50, 0, 100, true)
  tweakLevelKnob.fillColour = knobColour
  tweakLevelKnob.outlineColour = outlineColour
  tweakLevelKnob.displayName = "Tweak level"
  tweakLevelKnob.bounds = {10,10,width/2,height*3}

  patchesMenu = tweakPanel:Menu("PatchesMenu")
  patchesMenu.x = 10
  patchesMenu.y = tweakLevelKnob.y + tweakLevelKnob.height + 20
  patchesMenu.displayName = "Stored snapshots"
  patchesMenu.changed = function(self)
    local index = self.value
    if #storedPatches == 0 then
      print("No patches")
      return
    end
    if index > #storedPatches then
      print("No patch at index")
      index = #snapshots
    end
    tweaks = storedPatches[index]
    for i,v in ipairs(tweaks) do
      setWidgetValue(v.index, v.widget, v.value)
    end
    print("Tweaks set from patch at index:", index)
  end

  local prevPatchButton = tweakPanel:Button("PrevPatch")
  prevPatchButton.displayName = "<"
  prevPatchButton.x = patchesMenu.x + patchesMenu.width + marginX
  prevPatchButton.y = patchesMenu.y + 25
  prevPatchButton.width = 25
  prevPatchButton.changed = function(self)
    if #storedPatches == 0 then
      print("No patches")
      return
    end
    local value = patchesMenu.value - 1
    if value < 1 then
      value = #storedPatches
    end
    patchesMenu:setValue(value)
  end

  local nextPatchButton = tweakPanel:Button("NextPatch")
  nextPatchButton.displayName = ">"
  nextPatchButton.x = prevPatchButton.x + prevPatchButton.width + marginX
  nextPatchButton.y = prevPatchButton.y
  nextPatchButton.width = 25
  nextPatchButton.changed = function(self)
    if #storedPatches == 0 then
      print("No patches")
      return
    end
    local value = patchesMenu.value + 1
    if value > #storedPatches then
      value = 1
    end
    patchesMenu:setValue(value)
  end

  local actions = {"Choose...", "Add to snapshots", "Update selected snapshot", "Recall saved patch", "Initialize patch", "--- DANGERZONE ---", "Remove selected", "Remove all snapshots"}
  local managePatchesMenu = tweakPanel:Menu("ManagePatchesMenu", actions)
  managePatchesMenu.x = nextPatchButton.x + nextPatchButton.width + marginX
  managePatchesMenu.y = patchesMenu.y
  managePatchesMenu.displayName = "Actions"
  managePatchesMenu.changed = function(self)
    if self.value == 1 then
      return
    end
    if self.value == 2 then
      storeNewSnapshot()
    elseif self.value == 3 then
      updateSelectedSnapshot()
    elseif self.value == 4 then
      recallStoredPatch()
    elseif self.value == 5 then
      initPatch()
    elseif self.value == 7 then
      removeSelectedSnapshot()
    elseif self.value == 8 then
      clearStoredPatches()
    end
    self:setValue(1)
  end

  local tweakButton = tweakPanel:Button("Tweak")
  tweakButton.displayName = "Tweak patch"
  tweakButton.bounds = {width/2,10,width/2-10,tweakLevelKnob.height}

  local tweakSourceMenu = tweakPanel:Menu("TweakSource", tweakSources)
  tweakSourceMenu.displayName = "Tweak source"
  tweakSourceMenu.width = width/4-10
  tweakSourceMenu.x = width/2
  tweakSourceMenu.y = patchesMenu.y

  local envStyleMenu = tweakPanel:Menu("EnvStyle", {"Automatic", "Very short", "Short", "Medium short", "Medium", "Medium long", "Long", "Very long"})
  envStyleMenu.displayName = "Envelope Style"
  envStyleMenu.width = tweakSourceMenu.width
  envStyleMenu.x = tweakSourceMenu.width + tweakSourceMenu.x + 10
  envStyleMenu.y = tweakSourceMenu.y

  -- SCOPE BUTTONS - synthesis, modulation, filter, mixer, effects
  local synthesisButton = tweakPanel:OnOffButton("Synthesis", true)
  synthesisButton.fillColour = knobColour
  synthesisButton.size = {76,35}
  synthesisButton.x = width/2
  synthesisButton.y = tweakSourceMenu.y + tweakSourceMenu.height + 10

  local filterButton = tweakPanel:OnOffButton("Filter", true)
  filterButton.fillColour = knobColour
  filterButton.size = {60,35}
  filterButton.x = synthesisButton.x + synthesisButton.width + marginX
  filterButton.y = synthesisButton.y

  local modulationButton = tweakPanel:OnOffButton("Modulation", true)
  modulationButton.fillColour = knobColour
  modulationButton.size = {76,35}
  modulationButton.x = filterButton.x + filterButton.width + marginX
  modulationButton.y = synthesisButton.y

  local mixerButton = tweakPanel:OnOffButton("Mixer", true)
  mixerButton.fillColour = knobColour
  mixerButton.size = {60,35}
  mixerButton.x = modulationButton.x + modulationButton.width + marginX
  mixerButton.y = synthesisButton.y

  local effectsButton = tweakPanel:OnOffButton("Effects", true)
  effectsButton.fillColour = knobColour
  effectsButton.size = {60,35}
  effectsButton.x = mixerButton.x + mixerButton.width + marginX
  effectsButton.y = synthesisButton.y

  tweakButton.changed = function(self)
    print("Start tweaking!")
    for i,v in ipairs(tweakables) do
      local skip = false
      if v.category == "synthesis" and synthesisButton.value == false then
        skip = true
      elseif v.category == "modulation" and modulationButton.value == false then
        skip = true
      elseif v.category == "filter" and filterButton.value == false then
        skip = true
      elseif v.category == "mixer" and mixerButton.value == false then
        skip = true
      elseif v.category == "effects" and effectsButton.value == false then
        skip = true
      end
      if skip == false then
        tweakWidget(v, tweakLevelKnob.value, 0, tweakSourceMenu.value, envStyleMenu.value)
      else
        print("Skipping:", v.widget.name)
      end
    end
    print("Tweaking complete!")
  end
  
  function clearStoredPatches()
    print("Clearing stored snapshots...")
    storedPatches = {}
    patchesMenu:clear()
  end

  function initPatch()
    print("Setting default values...")
    for i,v in ipairs(tweakables) do
      v.widget.value = v.widget.default
      print("Set default value for widget", v.widget.name, v.widget.value)
    end
  end

  function setWidgetValue(index, widgetName, value)
    if widgetName == tweakables[index].widget.name then
      tweakables[index].widget.value = value
      print("Set widget value: ", widgetName, tweakables[index].widget.value, value)
    end
  end

  function recallStoredPatch()
    print("Recalling stored patch...")
    for i,v in ipairs(storedPatch) do
      setWidgetValue(v.index, v.widget, v.value)
      print("Set value for widget", v.widget.name, v.value)
    end
  end

  function updateSelectedSnapshot()
    local selected = patchesMenu.value
    if #storedPatches == 0 then
      return
    end
    local snapshot = {}
    for i,v in ipairs(tweakables) do
      table.insert(snapshot, {index=i,widget=v.widget.name,value=v.widget.value})
    end
    table.remove(storedPatches, selected)
    table.insert(storedPatches, selected, snapshot)
    print("Updating snapshot:", selected)
  end

  function removeSelectedSnapshot()
    local selected = patchesMenu.value
    if #storedPatches == 0 or selected == 1 then
      return
    end
    table.remove(storedPatches, selected)
    patchesMenu:clear()
    populatePatchesMenu()
    print("Remove snapshot:", selected)
    patchesMenu:setValue(#storedPatches)
  end

  function storeNewSnapshot()
    print("Storing patch tweaks...")
    if #storedPatches == 0 then
      table.insert(storedPatches, storedPatch)
    end
    local snapshot = {}
    for i,v in ipairs(tweakables) do
      table.insert(snapshot, {index=i,widget=v.widget.name,value=v.widget.value})
    end
    table.insert(storedPatches, snapshot)
    print("Storing snapshot")
    patchesMenu:clear()
    populatePatchesMenu()
    print("Adding to patchesMenu", index)
    patchesMenu:setValue(#storedPatches)
  end

  return tweakPanel
end

--------------------------------------------------------------------------------
-- Twequencer Panel
--------------------------------------------------------------------------------

function createTwequencerPanel()
  local arpId = 0
  local heldNotes = {}
  local snapshots = {}
  --local bgColor = "#00000000"
  
  local tweqPanel = Panel("Sequencer")
  tweqPanel.backgroundColour = bgColor
  tweqPanel.x = marginX
  tweqPanel.y = height * 1.6
  tweqPanel.width = width
  tweqPanel.height = 380

  local sequencerPlayMenu = tweqPanel:Menu("SequencerPlay", {"Off", "Mono", "As played", "Random", "Chord"})
  sequencerPlayMenu.displayName = "Play Mode"
  sequencerPlayMenu.width = 120

  local tweakLevelKnob = tweqPanel:Knob("SeqTweakLevel", 0, 0, 100, true)
  tweakLevelKnob.fillColour = knobColour
  tweakLevelKnob.outlineColour = outlineColour
  tweakLevelKnob.persistent = false
  tweakLevelKnob.displayName = "Tweak Level"
  tweakLevelKnob.x = sequencerPlayMenu.x
  tweakLevelKnob.y = sequencerPlayMenu.y + sequencerPlayMenu.height + 12
  tweakLevelKnob.width = sequencerPlayMenu.width

  local numStepsBox = tweqPanel:NumBox("Steps", 16, 2, 32, true)
  numStepsBox.backgroundColour = "black"
  numStepsBox.textColour = "cyan"
  numStepsBox.arrowColour = "grey"
  --numStepsBox.outlineColour = "#1fFFFFFF" -- transparent white

  local seqPitchTable = tweqPanel:Table("Pitch", numStepsBox.value, 0, -12, 12, true)
  seqPitchTable.showPopupDisplay = true
  seqPitchTable.showLabel = true
  seqPitchTable.fillStyle = "gloss"
  seqPitchTable.sliderColour = knobColour
  seqPitchTable.width = 400
  seqPitchTable.height = 80
  seqPitchTable.x = sequencerPlayMenu.width * 1.2

  local seqVelTable = tweqPanel:Table("Velocity", numStepsBox.value, 100, 1, 127, true)
  seqVelTable.showPopupDisplay = true
  seqVelTable.showLabel = true
  seqVelTable.fillStyle = "gloss"
  seqVelTable.sliderColour = knobColour
  seqVelTable.width = seqPitchTable.width
  seqVelTable.height = seqPitchTable.height
  seqVelTable.x = seqPitchTable.x
  seqVelTable.y = seqPitchTable.y + seqPitchTable.height + marginY

  local resolution = tweqPanel:Menu{"Resolution", getResolutionNames(), selected=15}
  resolution.x = seqPitchTable.x + seqPitchTable.width + 30
  resolution.backgroundColour = "black"
  resolution.textColour = "cyan"
  resolution.arrowColour = "grey"
  --resolution.outlineColour = "#1fFFFFFF" -- transparent white

  local positionTable = tweqPanel:Table("Position", numStepsBox.value, 0, 0, 1, true)
  positionTable.enabled = false
  positionTable.persistent = false
  positionTable.fillStyle = "solid"
  positionTable.sliderColour = outlineColour
  positionTable.width = seqPitchTable.width
  positionTable.height = height / 2
  positionTable.x = seqPitchTable.x
  positionTable.y = seqVelTable.y + seqVelTable.height + 10

  local snapshotsMenu = tweqPanel:Menu("SnapshotsMenu")
  snapshotsMenu.x = positionTable.x
  snapshotsMenu.y = positionTable.y + positionTable.height + 10
  snapshotsMenu.width = 235
  snapshotsMenu.enabled = false
  snapshotsMenu.displayName = "Snapshots"
  snapshotsMenu.persistent = false
  snapshotsMenu.changed = function(self)
    local index = self.value
    if #snapshots == 0 then
      print("No snapshots")
      return
    end
    if index > #snapshots then
      print("No snapshot at index")
      index = #snapshots
    end
    tweaks = snapshots[index]
    for i,v in ipairs(tweaks) do
      v.widget.value = v.value
    end
    print("Tweaks set from snapshot at index:", index)
  end

  local prevSnapshotButton = tweqPanel:Button("PrevSnapshot")
  prevSnapshotButton.displayName = "<"
  prevSnapshotButton.x = snapshotsMenu.x + snapshotsMenu.width + marginX
  prevSnapshotButton.y = snapshotsMenu.y + 25
  prevSnapshotButton.width = 25
  prevSnapshotButton.enabled = false
  prevSnapshotButton.persistent = false
  prevSnapshotButton.changed = function(self)
    if #snapshots == 0 then
      print("No snapshots")
      return
    end
    local value = snapshotsMenu.value - 1
    if value < 1 then
      value = #snapshots
    end
    snapshotsMenu:setValue(value)
  end
  
  local nextSnapshotButton = tweqPanel:Button("NextSnapshot")
  nextSnapshotButton.displayName = ">"
  nextSnapshotButton.x = prevSnapshotButton.x + prevSnapshotButton.width + marginX
  nextSnapshotButton.y = prevSnapshotButton.y
  nextSnapshotButton.width = 25
  nextSnapshotButton.enabled = false
  nextSnapshotButton.persistent = false
  nextSnapshotButton.changed = function(self)
    if #snapshots == 0 then
      print("No snapshots")
      return
    end
    local value = snapshotsMenu.value + 1
    if value > #snapshots then
      value = 1
    end
    snapshotsMenu:setValue(value)
  end  

  local storeSnapshotButton = tweqPanel:Button("storeSnapshotButton")
  storeSnapshotButton.displayName = "Store snapshot"
  storeSnapshotButton.x = nextSnapshotButton.x + nextSnapshotButton.width + marginX
  storeSnapshotButton.y = nextSnapshotButton.y
  storeSnapshotButton.enabled = false
  storeSnapshotButton.changed = function(self)
    local index = snapshotsMenu.value
    if #snapshots == 0 then
      print("No snapshots")
      return
    end
    if index > #snapshots then
      print("No snapshot at index")
      return
    end
    if #storedPatches == 0 then
      table.insert(storedPatches, storedPatch)
    end
    local snapshot = {}
    for i,v in ipairs(snapshots[index]) do
      table.insert(snapshot, {index=i,widget=v.widget.name,value=v.widget.value})
    end
    table.insert(storedPatches, snapshot)
    print("Storing snapshot")
    patchesMenu:clear()
    populatePatchesMenu()
    print("Tweaks stored from snapshot at index:", index)
  end

  function populateSnapshots()
    snapshots = {}
    snapshotsMenu:clear()
    for i = 1, numStepsBox.value do
      snapshotsMenu:addItem("Step "..i)
      table.insert(snapshots, {})
    end
  end

  numStepsBox.x = resolution.x
  numStepsBox.y = resolution.y + resolution.height + marginY
  numStepsBox.changed = function (self)
    seqPitchTable.length = self.value
    seqVelTable.length = self.value
    positionTable.length = self.value
    populateSnapshots()
  end
  numStepsBox:changed()

  local gateKnob = tweqPanel:Knob("GateKnob", 0.8, 0, 1)
  gateKnob.fillColour = knobColour
  gateKnob.outlineColour = outlineColour
  gateKnob.x = resolution.x
  gateKnob.y = numStepsBox.y + numStepsBox.height + 10
  gateKnob.changed = function(self)
      self.displayText = percent(self.value)
  end
  gateKnob:changed() -- force update

  sequencerPlayMenu.changed = function (self)
    -- Stop sequencer if turned off
    if self.value == 1 then
      heldNotes = {}
      clearPosition()
      resetTweakLevel()
      arpId = arpId + 1
    end
  end

  local tweakSourceMenu = tweqPanel:Menu("SeqTweakSource", tweakSources)
  tweakSourceMenu.displayName = "Tweak source"
  tweakSourceMenu.x = snapshotsMenu.x
  tweakSourceMenu.y = snapshotsMenu.y + snapshotsMenu.height + 10

  -- synthesis, modulation, filter, mixer, effects
  local synthesisButton = tweqPanel:OnOffButton("SeqSynthesis", true)
  synthesisButton.displayName = "Synthesis"
  synthesisButton.fillColour = knobColour
  synthesisButton.size = {78,35}
  synthesisButton.x = tweakSourceMenu.x
  synthesisButton.y = tweakSourceMenu.y + tweakSourceMenu.height + 10

  local filterButton = tweqPanel:OnOffButton("SeqFilter", true)
  filterButton.displayName = "Filter"
  filterButton.fillColour = knobColour
  filterButton.size = {78,35}
  filterButton.x = synthesisButton.x + synthesisButton.width + marginX
  filterButton.y = synthesisButton.y

  local modulationButton = tweqPanel:OnOffButton("SeqModulation", true)
  modulationButton.displayName = "Modulation"
  modulationButton.fillColour = knobColour
  modulationButton.size = {78,35}
  modulationButton.x = filterButton.x + filterButton.width + marginX
  modulationButton.y = synthesisButton.y

  local mixerButton = tweqPanel:OnOffButton("SeqMixer", true)
  mixerButton.displayName = "Mixer"
  mixerButton.fillColour = knobColour
  mixerButton.size = {78,35}
  mixerButton.x = modulationButton.x + modulationButton.width + marginX
  mixerButton.y = synthesisButton.y

  local effectsButton = tweqPanel:OnOffButton("SeqEffects", true)
  effectsButton.displayName = "Effects"
  effectsButton.fillColour = knobColour
  effectsButton.size = {78,35}
  effectsButton.x = mixerButton.x + mixerButton.width + marginX
  effectsButton.y = synthesisButton.y

  function getTweakablesForTwequencer()
    local t = {}
    for i,v in ipairs(tweakables) do
      local skip = false
      if v.category == "synthesis" and synthesisButton.value == false then
        skip = true
      elseif v.category == "modulation" and modulationButton.value == false then
        skip = true
      elseif v.category == "filter" and filterButton.value == false then
        skip = true
      elseif v.category == "mixer" and mixerButton.value == false then
        skip = true
      elseif v.category == "effects" and effectsButton.value == false then
        skip = true
      end
      if skip == true or v.widget.enabled == false or v.excludeWithDuration == true then
        print("Skipping:", v.widget.name)
      else
        table.insert(t, v)
      end
    end
  
    print("Widgets ready:", #t)

    return t
  end

  function resetTweakLevel()
    tweakLevelKnob.value = 0
  end

  function clearPosition()
    for i = 1, numStepsBox.value do
      positionTable:setValue(i, 0)
    end
  end

  function getSpawnsFromResolution(res)
    local factor = res / 21 * getResolution(res) / 2.4
    local num = math.ceil(getResolution(res) / factor)
    print("Number of spawns for resolution", num, getResolution(res))
    return num
  end

  function arpeg(arpId_)
    local index = 0
    local heldNoteIndex = 0
    local tweakablesIndex = 0
    -- START ARP LOOP
    while arpId_ == arpId do
      print("Position index:", index)
      
      -- GET NOTES FOR ARP
      local notes = {}
      local pitchAdjustment = seqPitchTable:getValue(index+1)
      if sequencerPlayMenu.value == 2 then -- MONO
        heldNoteIndex = #heldNotes
        table.insert(notes, heldNotes[heldNoteIndex].note + pitchAdjustment)
      elseif sequencerPlayMenu.value == 3 then -- AS PLAYED
        heldNoteIndex = heldNoteIndex + 1 -- Increment
        if heldNoteIndex > #heldNotes then
          heldNoteIndex = 1
        end
        table.insert(notes, heldNotes[heldNoteIndex].note + pitchAdjustment)
      elseif sequencerPlayMenu.value == 4 then -- RANDOM
        heldNoteIndex = math.random(1, #heldNotes)
        table.insert(notes, heldNotes[heldNoteIndex].note + pitchAdjustment)
      elseif sequencerPlayMenu.value == 5 then -- CHORD
        for i=1,#heldNotes do
          table.insert(notes, heldNotes[i].note + pitchAdjustment)
        end
      end

      -- PLAY NOTE(S)
      local p = getResolution(resolution.value)
      local vel = seqVelTable:getValue(index+1)
      local numSteps = numStepsBox.value
      local currentPosition = (index % numSteps) + 1
      print("Number of steps:", numSteps)
      print("Current pos:", currentPosition)
      for i,note in ipairs(notes) do
        playNote(note, vel, beat2ms(gateKnob.value*p))
      end

      -- UPDATE POSITION TABLE AND INCREMENT POSITION
      positionTable:setValue((index - 1 + numSteps) % numSteps + 1, 0)
      positionTable:setValue(currentPosition, 1)
      index = (index + 1) % numSteps -- increment position

      -- CHECK FOR TWEAKLEVEL
      if tweakLevelKnob.value > 0 then
        -- STORE SNAPSHOT AT CURRENT POS
        snapshotsMenu.enabled = true
        prevSnapshotButton.enabled = true
        nextSnapshotButton.enabled = true
        storeSnapshotButton.enabled = true
        snapshotsMenu:setValue(currentPosition, false)
        local snapshot = {}
        for i,v in ipairs(tweakables) do
          table.insert(snapshot, {widget=v.widget,value=v.widget.value})
        end
        table.remove(snapshots, currentPosition)
        table.insert(snapshots, currentPosition, snapshot)
        print("Updated snapshot at index:", currentPosition)

        -- START TWEAKING
        print("Tweaklevel", tweakLevelKnob.value)
        local tweakablesForTwequencer = getTweakablesForTwequencer()
        if #tweakablesForTwequencer > 0 then
          for i = 1, getSpawnsFromResolution(resolution.value), 1 do
            tweakablesIndex = tweakablesIndex + 1 -- Increment
            if tweakablesIndex > #tweakablesForTwequencer then
              tweakablesIndex = math.random(#tweakablesForTwequencer) -- start over from random index
            end
            spawn(tweakWidget, tweakablesForTwequencer[tweakablesIndex], tweakLevelKnob.value, p)
            print("Spawn tweakWidget i/tweakablesIndex:", i, tweakablesIndex)
          end
        end
      end

      -- WAIT FOR NEXT BEAT
      waitBeat(p)
    end
  end

  function onNote(e)
    print("Note:", e.note, "Velocity:", e.velocity)
    if sequencerPlayMenu.value > 1 then
      table.insert(heldNotes, e)
      if #heldNotes == 1 then
          arpeg(arpId)
      end
    else
      postEvent(e)
    end
  end

  function onRelease(e)
    if sequencerPlayMenu.value > 1 then
      for i,v in ipairs(heldNotes) do
        if v.note == e.note then
          table.remove(heldNotes, i)
          if #heldNotes == 0 then
            clearPosition()
            resetTweakLevel()
            arpId = arpId + 1
          end
          break
        end
      end
    else
      postEvent(e)
    end
  end

  return tweqPanel
end

--------------------------------------------------------------------------------
-- Osc 1
--------------------------------------------------------------------------------

function createOsc1Panel()
  local osc1Panel = Panel("Osc1Panel")

  osc1Panel:Label("Osc 1")

  if isAnalog then
    local osc1ShapeKnob = osc1Panel:Knob("Osc1Wave", 1, 1, 6, true)
    osc1ShapeKnob.displayName = "Waveform"
    osc1ShapeKnob.fillColour = knobColour
    osc1ShapeKnob.outlineColour = osc1Colour
    osc1ShapeKnob.changed = function(self)
      osc1:setParameter("Waveform", self.value)
      local waveforms = {"Saw", "Square", "Triangle", "Sine", "Noise", "Pulse"}
      self.displayText = waveforms[self.value]
    end
    osc1ShapeKnob:changed()
    table.insert(tweakables, {widget=osc1ShapeKnob,min=6,default=10,noDefaultTweak=true,category="synthesis"})
  else
    local osc1ShapeKnob = osc1Panel:Knob("Osc1Wave", 0, 0, 1)
    osc1ShapeKnob.displayName = "Wave"
    osc1ShapeKnob.fillColour = knobColour
    osc1ShapeKnob.outlineColour = osc1Colour
    osc1ShapeKnob.changed = function(self)
      osc1Shape:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    osc1ShapeKnob:changed()
    table.insert(tweakables, {widget=osc1ShapeKnob,default=10,category="synthesis"})
  end
  
  local osc1PhaseKnob = osc1Panel:Knob("Osc1StartPhase", 0, 0, 1)
  osc1PhaseKnob.displayName = "Start Phase"
  osc1PhaseKnob.fillColour = knobColour
  osc1PhaseKnob.outlineColour = osc1Colour
  osc1PhaseKnob.changed = function(self)
    osc1:setParameter("StartPhase", self.value)
    self.displayText = percent(self.value)
  end
  osc1PhaseKnob:changed()
  table.insert(tweakables, {widget=osc1PhaseKnob,default=50,category="synthesis"})
  
  local osc1PitchKnob = osc1Panel:Knob("Osc1Pitch", 0, -2, 2, true)
  osc1PitchKnob.displayName = "Octave"
  osc1PitchKnob.fillColour = knobColour
  osc1PitchKnob.outlineColour = osc1Colour
  osc1PitchKnob.changed = function(self)
    local factor = 1 / 4;
    local value = (self.value * factor) + 0.5;
    osc1Pitch:setParameter("Value", value)
  end
  osc1PitchKnob:changed()
  table.insert(tweakables, {widget=osc1PitchKnob,min=-2,max=2,default=80,noDefaultTweak=true,zero=25,category="synthesis"})

  if isAnalog then
    local hardsyncKnob = osc1Panel:Knob("HardsyncOsc1", 0, 0, 36)
    hardsyncKnob.displayName = "Hardsync"
    hardsyncKnob.mapper = Mapper.Quadratic
    hardsyncKnob.fillColour = knobColour
    hardsyncKnob.outlineColour = osc1Colour
    hardsyncKnob.changed = function(self)
      osc1:setParameter("HardSyncShift", self.value)
    end
    hardsyncKnob:changed()
    table.insert(tweakables, {widget=hardsyncKnob,min=36,zero=50,default=50,noDefaultTweak=true,category="synthesis"})

    local atToHardsycKnob = osc1Panel:Knob("AtToHarsyncosc1", 0, 0, 1)
    atToHardsycKnob.displayName = "AT->Sync"
    atToHardsycKnob.fillColour = knobColour
    atToHardsycKnob.outlineColour = filterColour
    atToHardsycKnob.changed = function(self)
      analogMacros["atToHardsync1"]:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    atToHardsycKnob:changed()
    table.insert(tweakables, {widget=atToHardsycKnob,zero=25,default=25,category="synthesis"})
  else
    local aftertouchToWaveKnob = osc1Panel:Knob("AftertouchToWave1", 0, -1, 1)
    aftertouchToWaveKnob.displayName = "AT->Wave"
    aftertouchToWaveKnob.fillColour = knobColour
    aftertouchToWaveKnob.outlineColour = filterColour
    aftertouchToWaveKnob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["atToShape1"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    aftertouchToWaveKnob:changed()
    table.insert(tweakables, {widget=aftertouchToWaveKnob,bipolar=25,excludeWithDuration=true,category="synthesis"})

    local wheelToWaveKnob = osc1Panel:Knob("WheelToWave1", 0, -1, 1)
    wheelToWaveKnob.displayName = "Wheel->Wave"
    wheelToWaveKnob.fillColour = knobColour
    wheelToWaveKnob.outlineColour = filterColour
    wheelToWaveKnob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["wheelToShape1"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    wheelToWaveKnob:changed()
    table.insert(tweakables, {widget=wheelToWaveKnob,bipolar=25,excludeWithDuration=true,category="synthesis"})
  end

  return osc1Panel
end

local osc1Panel = createOsc1Panel()

--------------------------------------------------------------------------------
-- Osc 2
--------------------------------------------------------------------------------

function createOsc2Panel()
  local osc2Panel = Panel("Osc2Panel")

  osc2Panel:Label("Osc 2")

  if isAnalog then
    local osc2ShapeKnob = osc2Panel:Knob("Osc2Wave", 1, 1, 6, true)
    osc2ShapeKnob.displayName = "Waveform"
    osc2ShapeKnob.fillColour = knobColour
    osc2ShapeKnob.outlineColour = osc2Colour
    osc2ShapeKnob.changed = function(self)
      osc2:setParameter("Waveform", self.value)
      local waveforms = {"Saw", "Square", "Triangle", "Sine", "Noise", "Pulse"}
      self.displayText = waveforms[self.value]
    end
    osc2ShapeKnob:changed()
    table.insert(tweakables, {widget=osc2ShapeKnob,min=6,default=10,noDefaultTweak=true,category="synthesis"})
  else
    local osc2ShapeKnob = osc2Panel:Knob("Osc2Wave", 0, 0, 1)
    osc2ShapeKnob.displayName = "Wave"
    osc2ShapeKnob.fillColour = knobColour
    osc2ShapeKnob.outlineColour = osc2Colour
    osc2ShapeKnob.changed = function(self)
      osc2Shape:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    osc2ShapeKnob:changed()
    table.insert(tweakables, {widget=osc2ShapeKnob,default=10,category="synthesis"})  
  end

  local osc2PhaseKnob = osc2Panel:Knob("Osc2StartPhase", 0, 0, 1)
  osc2PhaseKnob.displayName = "Start Phase"
  osc2PhaseKnob.fillColour = knobColour
  osc2PhaseKnob.outlineColour = osc2Colour
  osc2PhaseKnob.changed = function(self)
    osc2:setParameter("StartPhase", self.value)
    self.displayText = percent(self.value)
  end
  osc2PhaseKnob:changed()
  table.insert(tweakables, {widget=osc2PhaseKnob,default=50,category="synthesis"})

  local osc2PitchKnob = osc2Panel:Knob("Osc2Pitch", 0, -24, 24, true)
  osc2PitchKnob.displayName = "Pitch"
  osc2PitchKnob.fillColour = knobColour
  osc2PitchKnob.outlineColour = osc2Colour
  osc2PitchKnob.changed = function(self)
    local factor = 1 / 48;
    local value = (self.value * factor) + 0.5;
    osc2Pitch:setParameter("Value", value)
  end
  osc2PitchKnob:changed()
  table.insert(tweakables, {widget=osc2PitchKnob,min=-24,max=24,floor=-12,ceiling=12,probability=50,default=70,noDefaultTweak=true,zero=20,category="synthesis"})

  local osc2DetuneKnob = osc2Panel:Knob("Osc2FinePitch", 0, 0, 1)
  osc2DetuneKnob.displayName = "Fine Pitch"
  osc2DetuneKnob.fillColour = knobColour
  osc2DetuneKnob.outlineColour = osc2Colour
  osc2DetuneKnob.changed = function(self)
    osc2Detune:setParameter("Value", self.value)
  end
  osc2DetuneKnob:changed()
  table.insert(tweakables, {widget=osc2DetuneKnob,ceiling=0.25,probability=80,default=30,category="synthesis"})

  if isAnalog then
    local hardsyncKnob = osc2Panel:Knob("HardsyncOsc2", 0, 0, 36)
    hardsyncKnob.displayName = "Hardsync"
    hardsyncKnob.mapper = Mapper.Quadratic
    hardsyncKnob.fillColour = knobColour
    hardsyncKnob.outlineColour = osc1Colour
    hardsyncKnob.changed = function(self)
      osc2:setParameter("HardSyncShift", self.value)
    end
    hardsyncKnob:changed()
    table.insert(tweakables, {widget=hardsyncKnob,min=36,zero=75,default=50,noDefaultTweak=true,category="synthesis"})
  else
    local wheelToWaveKnob = osc2Panel:Knob("WheelToWave2", 0, -1, 1)
    wheelToWaveKnob.displayName = "Wheel->Wave"
    wheelToWaveKnob.fillColour = knobColour
    wheelToWaveKnob.outlineColour = filterColour
    wheelToWaveKnob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["wheelToShape2"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    wheelToWaveKnob:changed()
    table.insert(tweakables, {widget=wheelToWaveKnob,bipolar=25,excludeWithDuration=true,category="synthesis"})
  end

  return osc2Panel
end

local osc2Panel = createOsc2Panel()

--------------------------------------------------------------------------------
-- Stereo/Unison
--------------------------------------------------------------------------------

function createUnisonPanel()
  local unisonPanel = Panel("UnisonPanel")

  unisonPanel:Label("Stereo/Unison")

  local panSpreadKnob = unisonPanel:Knob("PanSpread", 0, 0, 1)
  panSpreadKnob.displayName = "Pan Spread"
  panSpreadKnob.fillColour = knobColour
  panSpreadKnob.outlineColour = unisonColour
  panSpreadKnob.changed = function(self)
    panSpread:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  panSpreadKnob:changed()
  table.insert(tweakables, {widget=panSpreadKnob,ceiling=0.6,probability=70,default=30,category="synthesis"})

  if isAnalog then
    local randomPhaseStartKnob = unisonPanel:Knob("RandomPhaseStart", 0, 0, 1)
    randomPhaseStartKnob.displayName = "Rand Phase"
    randomPhaseStartKnob.fillColour = knobColour
    randomPhaseStartKnob.outlineColour = unisonColour
    randomPhaseStartKnob.changed = function(self)
      analogMacros["randomPhaseStart"]:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    randomPhaseStartKnob:changed()
    table.insert(tweakables, {widget=randomPhaseStartKnob,ceiling=0.3,probability=70,default=30,zero=30,category="synthesis"})
  end

  local unisonVoicesKnob = unisonPanel:Knob("UnisonVoices", 1, 1, 8, true)
  unisonVoicesKnob.displayName = "Unison"
  unisonVoicesKnob.fillColour = knobColour
  unisonVoicesKnob.outlineColour = unisonColour

  local unisonDetuneKnob = unisonPanel:Knob("UnisonDetune", 0.1, 0, 1)
  unisonDetuneKnob.displayName = "Detune"
  unisonDetuneKnob.fillColour = knobColour
  unisonDetuneKnob.outlineColour = unisonColour
  unisonDetuneKnob.changed = function(self)
    unisonDetune:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  unisonDetuneKnob:changed()
  table.insert(tweakables, {widget=unisonDetuneKnob,ceiling=0.3,probability=80,default=50,category="synthesis"})

  local stereoSpreadKnob = unisonPanel:Knob("StereoSpread", 0, 0, 1)
  stereoSpreadKnob.displayName = "Stereo Spread"
  stereoSpreadKnob.fillColour = knobColour
  stereoSpreadKnob.outlineColour = unisonColour
  stereoSpreadKnob.changed = function(self)
    stereoSpread:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  stereoSpreadKnob:changed()
  table.insert(tweakables, {widget=stereoSpreadKnob,ceiling=0.5,probability=40,default=40,category="synthesis"})

  local waveSpreadKnob
  if isWavetable then
    waveSpreadKnob = unisonPanel:Knob("WaveSpread", 0, 0, 1)
    waveSpreadKnob.displayName = "Wave Spread"
    waveSpreadKnob.fillColour = knobColour
    waveSpreadKnob.outlineColour = unisonColour
    waveSpreadKnob.changed = function(self)
      wavetableMacros["waveSpread"]:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    waveSpreadKnob:changed()
    table.insert(tweakables, {widget=waveSpreadKnob,ceiling=0.5,probability=30,default=30,category="synthesis"})
  end

  unisonVoicesKnob.changed = function(self)
    local factor = 1 / 8
    local value = factor * self.value
    local unisonActive = false
    if isAnalog then
      osc1:setParameter("NumOscillators", self.value)
      osc2:setParameter("NumOscillators", self.value)
    else
      wavetableMacros["unisonVoices"]:setParameter("Value", value)
    end
    if self.value == 1 then
      self.displayText = "Off"
      unisonActive = false
    else
      self.displayText = tostring(self.value)
      unisonActive = true
    end
    unisonDetuneKnob.enabled = unisonActive
    stereoSpreadKnob.enabled = unisonActive
    if waveSpreadKnob then
      waveSpreadKnob.enabled = unisonActive
    end
    noiseOsc:setParameter("Stereo", unisonActive)
  end
  unisonVoicesKnob:changed()
  table.insert(tweakables, {widget=unisonVoicesKnob,min=8,default=25,excludeWithDuration=true,category="synthesis"})

  return unisonPanel
end

local unisonPanel = createUnisonPanel()

--------------------------------------------------------------------------------
-- Mixer
--------------------------------------------------------------------------------

local mixerPanel = createMixerPanel()

--------------------------------------------------------------------------------
-- Low-pass Filter
--------------------------------------------------------------------------------

local filterPanel = createFilterPanel()

--------------------------------------------------------------------------------
-- High-pass Filter
--------------------------------------------------------------------------------

local hpFilterPanel = createHpFilterPanel()

--------------------------------------------------------------------------------
-- LFO
--------------------------------------------------------------------------------

local lfoPanel = createLfoPanel()

--------------------------------------------------------------------------------
-- LFO Targets Noise Osc
--------------------------------------------------------------------------------

local lfoTargetPanel3 = createLfoTargetPanel3()

--------------------------------------------------------------------------------
-- LFO Targets
--------------------------------------------------------------------------------

local lfoTargetPanel = createLfoTargetPanel()

--------------------------------------------------------------------------------
-- LFO Targets Osc 1
--------------------------------------------------------------------------------

function createLfoTargetPanel1()
  local lfoTargetPanel1 = Panel("LfoTargetPanel1")
  lfoTargetPanel1:Label("Osc 1")

  local osc1LfoToPWMKnob = lfoTargetPanel1:Knob("LfoToOsc1PWM", 0, 0, 0.5)
  osc1LfoToPWMKnob.displayName = "PWM"
  osc1LfoToPWMKnob.mapper = Mapper.Quartic
  osc1LfoToPWMKnob.fillColour = knobColour
  osc1LfoToPWMKnob.outlineColour = lfoColour
  osc1LfoToPWMKnob.changed = function(self)
    osc1LfoToPWM:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  osc1LfoToPWMKnob:changed()
  table.insert(tweakables, {widget=osc1LfoToPWMKnob,ceiling=0.25,probability=90,default=50,category="modulation"})

  if isAnalog then
    local lfoToHardsync1Knob = lfoTargetPanel1:Knob("LfoToHardsync1", 0, 0, 1)
    lfoToHardsync1Knob.displayName = "Hardsync"
    lfoToHardsync1Knob.fillColour = knobColour
    lfoToHardsync1Knob.outlineColour = lfoColour
    lfoToHardsync1Knob.changed = function(self)
      analogMacros["lfoToHardsync1"]:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    lfoToHardsync1Knob:changed()
    table.insert(tweakables, {widget=lfoToHardsync1Knob,zero=50,default=50,noDefaultTweak=true,category="modulation"})
  else
    local lfoToWT1Knob = lfoTargetPanel1:Knob("Osc1LfoToWaveIndex", 0, -1, 1)
    lfoToWT1Knob.displayName = "Waveindex"
    lfoToWT1Knob.fillColour = knobColour
    lfoToWT1Knob.outlineColour = lfoColour
    lfoToWT1Knob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["lfoToWT1"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    lfoToWT1Knob:changed()
    table.insert(tweakables, {widget=lfoToWT1Knob,bipolar=25,default=25,category="modulation"})

    local lfoToWaveSpread1Knob = lfoTargetPanel1:Knob("LfoToWaveSpreadOsc1", 0, -1, 1)
    lfoToWaveSpread1Knob.displayName = "WaveSpread"
    lfoToWaveSpread1Knob.fillColour = knobColour
    lfoToWaveSpread1Knob.outlineColour = lfoColour
    lfoToWaveSpread1Knob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["lfoToWaveSpread1"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    lfoToWaveSpread1Knob:changed()
    table.insert(tweakables, {widget=lfoToWaveSpread1Knob,bipolar=80,default=50,category="modulation"})
  end

  local lfoToPitchOsc1Knob = lfoTargetPanel1:Knob("LfoToPitchOsc1Knob", 0, 0, 48)
  lfoToPitchOsc1Knob.displayName = "Pitch"
  lfoToPitchOsc1Knob.mapper = Mapper.Quartic
  lfoToPitchOsc1Knob.fillColour = knobColour
  lfoToPitchOsc1Knob.outlineColour = lfoColour
  lfoToPitchOsc1Knob.changed = function(self)
    local factor = 1 / 48;
    local value = (self.value * factor)
    lfoToPitchOsc1:setParameter("Value", value)
  end
  lfoToPitchOsc1Knob:changed()
  table.insert(tweakables, {widget=lfoToPitchOsc1Knob,ceiling=0.1,probability=75,default=50,noDefaultTweak=true,zero=50,category="modulation"})

  return lfoTargetPanel1
end

local lfoTargetPanel1 = createLfoTargetPanel1()

--------------------------------------------------------------------------------
-- LFO Targets Osc 2
--------------------------------------------------------------------------------

function createLfoTargetPanel2()
  local lfoTargetPanel2 = Panel("LfoTargetPanel2")
  lfoTargetPanel2:Label("Osc 2")

  local osc2LfoToPWMKnob = lfoTargetPanel2:Knob("LfoToOsc2PWM", 0, 0, 0.5)
  osc2LfoToPWMKnob.displayName = "PWM"
  osc2LfoToPWMKnob.mapper = Mapper.Quartic
  osc2LfoToPWMKnob.fillColour = knobColour
  osc2LfoToPWMKnob.outlineColour = lfoColour
  osc2LfoToPWMKnob.changed = function(self)
    osc2LfoToPWM:setParameter("Value", self.value)
    self.displayText = percent(self.value)
  end
  osc2LfoToPWMKnob:changed()
  table.insert(tweakables, {widget=osc2LfoToPWMKnob,ceiling=0.25,probability=90,default=50,category="modulation"})

  if isAnalog then
    local lfoToHardsync2Knob = lfoTargetPanel2:Knob("LfoToHardsync2", 0, 0, 1)
    lfoToHardsync2Knob.displayName = "Hardsync"
    lfoToHardsync2Knob.fillColour = knobColour
    lfoToHardsync2Knob.outlineColour = lfoColour
    lfoToHardsync2Knob.changed = function(self)
      analogMacros["lfoToHardsync2"]:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    lfoToHardsync2Knob:changed()
    table.insert(tweakables, {widget=lfoToHardsync2Knob,zero=50,default=50,noDefaultTweak=true,category="modulation"})
  else
    local lfoToWT2Knob = lfoTargetPanel2:Knob("Osc2LfoToWaveIndex", 0, -1, 1)
    lfoToWT2Knob.displayName = "Waveindex"
    lfoToWT2Knob.fillColour = knobColour
    lfoToWT2Knob.outlineColour = lfoColour
    lfoToWT2Knob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["lfoToWT2"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    lfoToWT2Knob:changed()
    table.insert(tweakables, {widget=lfoToWT2Knob,bipolar=25,default=25,category="modulation"})

    local lfoToWaveSpread2Knob = lfoTargetPanel2:Knob("LfoToWaveSpreadOsc2", 0, -1, 1)
    lfoToWaveSpread2Knob.displayName = "WaveSpread"
    lfoToWaveSpread2Knob.fillColour = knobColour
    lfoToWaveSpread2Knob.outlineColour = lfoColour
    lfoToWaveSpread2Knob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["lfoToWaveSpread2"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    lfoToWaveSpread2Knob:changed()
    table.insert(tweakables, {widget=lfoToWaveSpread2Knob,bipolar=80,default=50,category="modulation"})
  end

  local lfoToPitchOsc2Knob = lfoTargetPanel2:Knob("LfoToPitchOsc2Knob", 0, 0, 48)
  lfoToPitchOsc2Knob.displayName = "Pitch"
  lfoToPitchOsc2Knob.mapper = Mapper.Quartic
  lfoToPitchOsc2Knob.fillColour = knobColour
  lfoToPitchOsc2Knob.outlineColour = lfoColour
  lfoToPitchOsc2Knob.changed = function(self)
    local factor = 1 / 48;
    local value = (self.value * factor)
    lfoToPitchOsc2:setParameter("Value", value)
  end
  lfoToPitchOsc2Knob:changed()
  table.insert(tweakables, {widget=lfoToPitchOsc2Knob,ceiling=0.1,probability=75,default=80,noDefaultTweak=true,zero=30,category="modulation"})

  return lfoTargetPanel2
end

local lfoTargetPanel2 = createLfoTargetPanel2()

--------------------------------------------------------------------------------
-- Amp Env
--------------------------------------------------------------------------------

local ampEnvPanel = createAmpEnvPanel()

--------------------------------------------------------------------------------
-- Filter Env
--------------------------------------------------------------------------------

local filterEnvPanel = createFilterEnvPanel()

--------------------------------------------------------------------------------
-- Filter Env Targets
--------------------------------------------------------------------------------

function createFilterEnvTargets1Panel()
  local filterEnvTargets1Panel = Panel("FilterEnvTargets1")
  filterEnvTargets1Panel:Label("Osc 1")

  if isAnalog then
    local filterEnvToHardsync1Knob = filterEnvTargets1Panel:Knob("FilterEnvToHardsync1Knob", 0, 0, 1)
    filterEnvToHardsync1Knob.displayName = "Hardsync"
    filterEnvToHardsync1Knob.fillColour = knobColour
    filterEnvToHardsync1Knob.outlineColour = filterEnvColour
    filterEnvToHardsync1Knob.changed = function(self)
      analogMacros["filterEnvToHardsync1"]:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    filterEnvToHardsync1Knob:changed()
    table.insert(tweakables, {widget=filterEnvToHardsync1Knob,zero=25,default=50,category="filter"})
  else
    local filterEnvToWT1Knob = filterEnvTargets1Panel:Knob("Osc1FilterEnvToIndex", 0, -1, 1)
    filterEnvToWT1Knob.displayName = "Osc 1 Wave"
    filterEnvToWT1Knob.fillColour = knobColour
    filterEnvToWT1Knob.outlineColour = lfoColour
    filterEnvToWT1Knob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["filterEnvToWT1"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    filterEnvToWT1Knob:changed()
    table.insert(tweakables, {widget=filterEnvToWT1Knob,bipolar=25,category="filter"})  
  end

  local filterEnvToPitchOsc1Knob = filterEnvTargets1Panel:Knob("FilterEnvToPitchOsc1", 0, 0, 48)
  filterEnvToPitchOsc1Knob.displayName = "Pitch"
  filterEnvToPitchOsc1Knob.mapper = Mapper.Quartic
  filterEnvToPitchOsc1Knob.fillColour = knobColour
  filterEnvToPitchOsc1Knob.outlineColour = filterEnvColour
  filterEnvToPitchOsc1Knob.changed = function(self)
    local factor = 1 / 48;
    local value = self.value * factor
    filterEnvToPitchOsc1:setParameter("Value", value)
  end
  filterEnvToPitchOsc1Knob:changed()
  table.insert(tweakables, {widget=filterEnvToPitchOsc1Knob,ceiling=0.1,probability=70,default=80,noDefaultTweak=true,zero=30,category="filter"})

  return filterEnvTargets1Panel
end

function createFilterEnvTargets2Panel()
  local filterEnvTargets2Panel = Panel("FilterEnvTargets2")
  filterEnvTargets2Panel:Label("Osc 2")

  if isAnalog then
    local filterEnvToHardsync2Knob = filterEnvTargets2Panel:Knob("FilterEnvToHardsync2Knob", 0, 0, 1)
    filterEnvToHardsync2Knob.displayName = "Hardsync"
    filterEnvToHardsync2Knob.fillColour = knobColour
    filterEnvToHardsync2Knob.outlineColour = filterEnvColour
    filterEnvToHardsync2Knob.changed = function(self)
      analogMacros["filterEnvToHardsync2"]:setParameter("Value", self.value)
      self.displayText = percent(self.value)
    end
    filterEnvToHardsync2Knob:changed()
    table.insert(tweakables, {widget=filterEnvToHardsync2Knob,zero=25,default=50,category="filter"})
  else
    local filterEnvToWT2Knob = filterEnvTargets2Panel:Knob("Osc2FilterEnvToIndex", 0, -1, 1)
    filterEnvToWT2Knob.displayName = "Osc 2 Wave"
    filterEnvToWT2Knob.fillColour = knobColour
    filterEnvToWT2Knob.outlineColour = lfoColour
    filterEnvToWT2Knob.changed = function(self)
      local value = (self.value + 1) * 0.5
      wavetableMacros["filterEnvToWT2"]:setParameter("Value", value)
      self.displayText = percent(self.value)
    end
    filterEnvToWT2Knob:changed()
    table.insert(tweakables, {widget=filterEnvToWT2Knob,bipolar=25,category="filter"})  
  end

  local filterEnvToPitchOsc2Knob = filterEnvTargets2Panel:Knob("FilterEnvToPitchOsc2", 0, 0, 48)
  filterEnvToPitchOsc2Knob.displayName = "Pitch"
  filterEnvToPitchOsc2Knob.mapper = Mapper.Quartic
  filterEnvToPitchOsc2Knob.fillColour = knobColour
  filterEnvToPitchOsc2Knob.outlineColour = filterEnvColour
  filterEnvToPitchOsc2Knob.changed = function(self)
    local factor = 1 / 48;
    local value = self.value * factor
    filterEnvToPitchOsc2:setParameter("Value", value)
  end
  filterEnvToPitchOsc2Knob:changed()
  table.insert(tweakables, {widget=filterEnvToPitchOsc2Knob,ceiling=0.1,probability=70,default=70,noDefaultTweak=true,zero=20,category="filter"})

  return filterEnvTargets2Panel
end

local filterEnvTargetsPanel = createFilterEnvTargetsPanel()
local filterEnvTargets1Panel = createFilterEnvTargets1Panel()
local filterEnvTargets2Panel = createFilterEnvTargets2Panel()

--------------------------------------------------------------------------------
-- Effects
--------------------------------------------------------------------------------

local effectsPanel = createEffectsPanel()

--------------------------------------------------------------------------------
-- Vibrato
--------------------------------------------------------------------------------

local vibratoPanel = createVibratoPanel()

--------------------------------------------------------------------------------
-- Pages
--------------------------------------------------------------------------------

local pagePanel = Panel("PagePanel")
pagePanel.backgroundColour = "#00000000"
pagePanel.x = marginX
pagePanel.y = marginY
pagePanel.width = 713
pagePanel.height = 30

local synthesisPageButton = pagePanel:OnOffButton("SynthesisPage", true)
synthesisPageButton.displayName = "Synthesis"
synthesisPageButton.persistent = false
local filterPageButton = pagePanel:OnOffButton("FilterPage", false)
filterPageButton.displayName = "Filters"
filterPageButton.persistent = false
local modulationPageButton = pagePanel:OnOffButton("ModulationPage", false)
modulationPageButton.displayName = "Modulation"
modulationPageButton.persistent = false
local twequencerPageButton = pagePanel:OnOffButton("TwequencerPage", false)
twequencerPageButton.displayName = "Twequencer"
twequencerPageButton.persistent = false
local patchmakerPageButton = pagePanel:OnOffButton("PatchmakerPage", false)
patchmakerPageButton.displayName = "Patchmaker"
patchmakerPageButton.persistent = false

mixerPanel.backgroundColour = "#3f000000"
mixerPanel.x = marginX
mixerPanel.y = pagePanel.height + marginY * 2
mixerPanel.width = width
mixerPanel.height = height

--------------------------------------------------------------------------------
-- Set up pages
--------------------------------------------------------------------------------

function setupSynthesisPage()
  --osc1Panel.backgroundColour = "#33AAAA11"
  osc1Panel.backgroundColour = bgColor
  osc1Panel.x = marginX
  osc1Panel.y = mixerPanel.y + height + marginY
  osc1Panel.width = width
  osc1Panel.height = height

  --osc2Panel.backgroundColour = "#44AAAA33"
  osc2Panel.backgroundColour = bgColor
  osc2Panel.x = marginX
  osc2Panel.y = osc1Panel.y + height + marginY
  osc2Panel.width = width
  osc2Panel.height = height

  --unisonPanel.backgroundColour = "#55AAAA44"
  unisonPanel.backgroundColour = bgColor
  unisonPanel.x = marginX
  unisonPanel.y = osc2Panel.y + height + marginY
  unisonPanel.width = width
  unisonPanel.height = height

  --vibratoPanel.backgroundColour = "#66AAAA66"
  vibratoPanel.backgroundColour = bgColor
  vibratoPanel.x = marginX
  vibratoPanel.y = unisonPanel.y + height + marginY
  vibratoPanel.width = width
  vibratoPanel.height = height

  --ampEnvPanel.backgroundColour = "#77AAAA77"
  ampEnvPanel.backgroundColour = bgColor
  ampEnvPanel.x = marginX
  ampEnvPanel.y = vibratoPanel.y + height + marginY
  ampEnvPanel.width = width
  ampEnvPanel.height = height

  --effectsPanel.backgroundColour = "#88AAAA99"
  effectsPanel.backgroundColour = bgColor
  effectsPanel.x = marginX
  effectsPanel.y = ampEnvPanel.y + height + marginY
  effectsPanel.width = width
  effectsPanel.height = height
end

function setupFilterPage()
  --filterPanel.backgroundColour = "#33AA0011"
  filterPanel.backgroundColour = bgColor
  filterPanel.x = marginX
  filterPanel.y = mixerPanel.y + height + marginY
  filterPanel.width = width
  filterPanel.height = height

  --hpFilterPanel.backgroundColour = "#44AA0022"
  hpFilterPanel.backgroundColour = bgColor
  hpFilterPanel.x = marginX
  hpFilterPanel.y = filterPanel.y + height + marginY
  hpFilterPanel.width = width
  hpFilterPanel.height = height

  --filterEnvPanel.backgroundColour = "#55AA0033"
  filterEnvPanel.backgroundColour = bgColor
  filterEnvPanel.x = marginX
  filterEnvPanel.y = hpFilterPanel.y + height + marginY
  filterEnvPanel.width = width
  filterEnvPanel.height = height

  --filterEnvTargetsPanel.backgroundColour = "#66AA0044"
  filterEnvTargetsPanel.backgroundColour = bgColor
  filterEnvTargetsPanel.x = marginX
  filterEnvTargetsPanel.y = filterEnvPanel.y + height + marginY
  filterEnvTargetsPanel.width = width
  filterEnvTargetsPanel.height = height

  --filterEnvTargets1Panel.backgroundColour = "#66AA0066"
  filterEnvTargets1Panel.backgroundColour = bgColor
  filterEnvTargets1Panel.x = marginX
  filterEnvTargets1Panel.y = filterEnvTargetsPanel.y + height
  filterEnvTargets1Panel.width = width
  filterEnvTargets1Panel.height = height

  --filterEnvTargets2Panel.backgroundColour = "#66AA0088"
  filterEnvTargets2Panel.backgroundColour = bgColor
  filterEnvTargets2Panel.x = marginX
  filterEnvTargets2Panel.y = filterEnvTargets1Panel.y + height
  filterEnvTargets2Panel.width = width
  filterEnvTargets2Panel.height = height
end

function setupModulationPage()
  --lfoPanel.backgroundColour = "#33000022"
  lfoPanel.backgroundColour = bgColor
  lfoPanel.x = marginX
  lfoPanel.y = mixerPanel.y + height + marginY
  lfoPanel.width = width
  lfoPanel.height = height * 2

  --lfoTargetPanel.backgroundColour = "#44000033"
  lfoTargetPanel.backgroundColour = bgColor
  lfoTargetPanel.x = marginX
  lfoTargetPanel.y = lfoPanel.y + lfoPanel.height + marginY
  lfoTargetPanel.width = width
  lfoTargetPanel.height = height

  --lfoTargetPanel1.backgroundColour = "#44000055"
  lfoTargetPanel1.backgroundColour = bgColor
  lfoTargetPanel1.x = marginX
  lfoTargetPanel1.y = lfoTargetPanel.y + height
  lfoTargetPanel1.width = width
  lfoTargetPanel1.height = height

  --lfoTargetPanel2.backgroundColour = "#44000077"
  lfoTargetPanel2.backgroundColour = bgColor
  lfoTargetPanel2.x = marginX
  lfoTargetPanel2.y = lfoTargetPanel1.y + height
  lfoTargetPanel2.width = width
  lfoTargetPanel2.height = height

  --lfoTargetPanel3.backgroundColour = "#44000099"
  lfoTargetPanel3.backgroundColour = bgColor
  lfoTargetPanel3.x = marginX
  lfoTargetPanel3.y = lfoTargetPanel2.y + height
  lfoTargetPanel3.width = width
  lfoTargetPanel3.height = height
end

setupSynthesisPage()
setupFilterPage()
setupModulationPage()

local tweqPanel = createTwequencerPanel()

local tweakPanel = createPatchMakerPanel()

--------------------------------------------------------------------------------
-- Set pages
--------------------------------------------------------------------------------

function setPage(page)
  osc1Panel.visible = page == 1
  osc2Panel.visible = page == 1
  unisonPanel.visible = page == 1
  vibratoPanel.visible = page == 1
  ampEnvPanel.visible = page == 1
  effectsPanel.visible = page == 1

  filterPanel.visible = page == 2
  hpFilterPanel.visible = page == 2
  filterEnvPanel.visible = page == 2
  filterEnvTargetsPanel.visible = page == 2
  filterEnvTargets1Panel.visible = page == 2
  filterEnvTargets2Panel.visible = page == 2
  
  lfoPanel.visible = page == 3
  lfoTargetPanel.visible = page == 3
  lfoTargetPanel1.visible = page == 3
  lfoTargetPanel2.visible = page == 3
  lfoTargetPanel3.visible = page == 3

  tweqPanel.visible = page == 4
  
  tweakPanel.visible = page == 5
end

synthesisPageButton.changed = function(self)
  filterPageButton:setValue(false, false)
  modulationPageButton:setValue(false, false)
  twequencerPageButton:setValue(false, false)
  patchmakerPageButton:setValue(false, false)
  setPage(1)
end

filterPageButton.changed = function(self)
  synthesisPageButton:setValue(false, false)
  modulationPageButton:setValue(false, false)
  twequencerPageButton:setValue(false, false)
  patchmakerPageButton:setValue(false, false)
  setPage(2)
end

modulationPageButton.changed = function(self)
  synthesisPageButton:setValue(false, false)
  filterPageButton:setValue(false, false)
  twequencerPageButton:setValue(false, false)
  patchmakerPageButton:setValue(false, false)
  setPage(3)
end

twequencerPageButton.changed = function(self)
  synthesisPageButton:setValue(false, false)
  filterPageButton:setValue(false, false)
  modulationPageButton:setValue(false, false)
  patchmakerPageButton:setValue(false, false)
  setPage(4)
end

patchmakerPageButton.changed = function(self)
  synthesisPageButton:setValue(false, false)
  filterPageButton:setValue(false, false)
  modulationPageButton:setValue(false, false)
  twequencerPageButton:setValue(false, false)
  setPage(5)
end

-- Set start page
synthesisPageButton.changed()

setSize(720, 480)

makePerformanceView()
]]></script>
                <ScriptData Pitch="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0" Velocity="100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100"/>
                <state><![CDATA[[[{"value":1,"index":1,"widget":"Osc1Wave"},{"value":0,"index":2,"widget":"Osc1StartPhase"},{"value":0,"index":3,"widget":"Osc1Pitch"},{"value":0,"index":4,"widget":"HardsyncOsc1"},{"value":0,"index":5,"widget":"AtToHarsyncosc1"},{"value":1,"index":6,"widget":"Osc2Wave"},{"value":0,"index":7,"widget":"Osc2StartPhase"},{"value":0,"index":8,"widget":"Osc2Pitch"},{"value":0,"index":9,"widget":"Osc2FinePitch"},{"value":0,"index":10,"widget":"HardsyncOsc2"},{"value":0,"index":11,"widget":"PanSpread"},{"value":0,"index":12,"widget":"RandomPhaseStart"},{"value":0.10000000149012,"index":13,"widget":"UnisonDetune"},{"value":0,"index":14,"widget":"StereoSpread"},{"value":1,"index":15,"widget":"UnisonVoices"},{"value":0.75,"index":16,"widget":"Osc1Mix"},{"value":0,"index":17,"widget":"Osc2Mix"},{"value":0,"index":18,"widget":"NoiseMix"},{"value":7,"index":19,"widget":"NoiseTypeMenu"},{"value":1,"index":20,"widget":"Cutoff"},{"value":0,"index":21,"widget":"Resonance"},{"value":0,"index":22,"widget":"KeyTracking"},{"value":0,"index":23,"widget":"WheelToCutoff"},{"value":0,"index":24,"widget":"AftertouchToCutoff"},{"value":0,"index":25,"widget":"HPCutoff"},{"value":0,"index":26,"widget":"HPFResonance"},{"value":0,"index":27,"widget":"HPFKeyTracking"},{"value":0,"index":28,"widget":"WheelToHpfCutoff"},{"value":0,"index":29,"widget":"AftertouchToHpfCutoff"},{"value":3,"index":30,"widget":"WaveFormTypeMenu"},{"value":false,"index":31,"widget":"Lfo2Sync"},{"value":4.5,"index":32,"widget":"LfoFreq"},{"value":true,"index":33,"widget":"Lfo2Trigger"},{"value":0,"index":34,"widget":"LfoFreqKeyFollow"},{"value":0,"index":35,"widget":"LfoDelay"},{"value":0,"index":36,"widget":"LfoRise"},{"value":0,"index":37,"widget":"LfoSmooth"},{"value":true,"index":38,"widget":"LfoBipolar"},{"value":false,"index":39,"widget":"LfoToNoiseOverride"},{"value":0,"index":40,"widget":"LfoToNoiseAmplitude"},{"value":0,"index":41,"widget":"LfoToNoiseHpfCutoff"},{"value":0,"index":42,"widget":"LfoToNoiseLpfCutoff"},{"value":0,"index":43,"widget":"LfoToDetune"},{"value":0,"index":44,"widget":"LfoToAmplitude"},{"value":0,"index":45,"widget":"LfoToHpfCutoff"},{"value":0,"index":46,"widget":"LfoToCutoff"},{"value":0,"index":47,"widget":"LfoToOsc1PWM"},{"value":0,"index":48,"widget":"LfoToHardsync1"},{"value":0,"index":49,"widget":"LfoToPitchOsc1Knob"},{"value":0,"index":50,"widget":"LfoToOsc2PWM"},{"value":0,"index":51,"widget":"LfoToHardsync2"},{"value":0,"index":52,"widget":"LfoToPitchOsc2Knob"},{"value":0.0010000000474975,"index":53,"widget":"Attack"},{"value":0.050000000745058,"index":54,"widget":"Decay"},{"value":1,"index":55,"widget":"Sustain"},{"value":0.0099999997764826,"index":56,"widget":"Release"},{"value":10,"index":57,"widget":"VelocityToAmpEnv"},{"value":0.0010000000474975,"index":58,"widget":"FAttack"},{"value":0.050000000745058,"index":59,"widget":"FDecay"},{"value":1,"index":60,"widget":"FSustain"},{"value":0.0099999997764826,"index":61,"widget":"FRelease"},{"value":10,"index":62,"widget":"VelocityToFilterEnv"},{"value":0,"index":63,"widget":"EnvelopeAmt"},{"value":0,"index":64,"widget":"HpfEnvelopeAmt"},{"value":0,"index":65,"widget":"FilterEnvToHardsync1Knob"},{"value":0,"index":66,"widget":"FilterEnvToPitchOsc1"},{"value":0,"index":67,"widget":"FilterEnvToHardsync2Knob"},{"value":0,"index":68,"widget":"FilterEnvToPitchOsc2"},{"value":0,"index":69,"widget":"Reverb"},{"value":0,"index":70,"widget":"Delay"},{"value":0,"index":71,"widget":"Chorus"},{"value":0,"index":72,"widget":"Drive"},{"value":false,"index":73,"widget":"Maximizer"},{"value":0,"index":74,"widget":"VibratoDepth"},{"value":0.69999998807907,"index":75,"widget":"VibratoRate"},{"value":0,"index":76,"widget":"LfoRiseTime"},{"value":0,"index":77,"widget":"WheelToVibrato"},{"value":0,"index":78,"widget":"AftertouchToVibrato"}]]]]></state>
            </ScriptProcessor>
            <Arpeggiator Name="EventProcessor1" Bypass="1" Mode="2" TriggerMode="1" OctaveMode="1" Octave="1" NumStrike="1" RepeatBottomNote="1" RepeatTopNote="0" Resolution="22" StepLength="0.88881832" ArpVelocityBlend="0.20804687" GrooveAmount="0" Hold="0" NumSteps="1" Step0State="1" Step1State="1" Step2State="1" Step3State="1" Step4State="0" Step5State="1" Step6State="0" Step7State="1" Step8State="1" Step9State="1" Step10State="1" Step11State="1" Step12State="1" Step13State="1" Step14State="1" Step15State="1" Step16State="1" Step17State="1" Step18State="1" Step19State="1" Step20State="1" Step21State="1" Step22State="1" Step23State="1" Step24State="1" Step25State="1" Step26State="1" Step27State="1" Step28State="1" Step29State="1" Step30State="1" Step31State="1" Step32State="1" Step33State="1" Step34State="1" Step35State="1" Step36State="1" Step37State="1" Step38State="1" Step39State="1" Step40State="1" Step41State="1" Step42State="1" Step43State="1" Step44State="1" Step45State="1" Step46State="1" Step47State="1" Step48State="1" Step49State="1" Step50State="1" Step51State="1" Step52State="1" Step53State="1" Step54State="1" Step55State="1" Step56State="1" Step57State="1" Step58State="1" Step59State="1" Step60State="1" Step61State="1" Step62State="1" Step63State="1" Step64State="1" Step65State="1" Step66State="1" Step67State="1" Step68State="1" Step69State="1" Step70State="1" Step71State="1" Step72State="1" Step73State="1" Step74State="1" Step75State="1" Step76State="1" Step77State="1" Step78State="1" Step79State="1" Step80State="1" Step81State="1" Step82State="1" Step83State="1" Step84State="1" Step85State="1" Step86State="1" Step87State="1" Step88State="1" Step89State="1" Step90State="1" Step91State="1" Step92State="1" Step93State="1" Step94State="1" Step95State="1" Step96State="1" Step97State="1" Step98State="1" Step99State="1" Step100State="1" Step101State="1" Step102State="1" Step103State="1" Step104State="1" Step105State="1" Step106State="1" Step107State="1" Step108State="1" Step109State="1" Step110State="1" Step111State="1" Step112State="1" Step113State="1" Step114State="1" Step115State="1" Step116State="1" Step117State="1" Step118State="1" Step119State="1" Step120State="1" Step121State="1" Step122State="1" Step123State="1" Step124State="1" Step125State="1" Step126State="1" Step127State="1" Step0Size="1" Step1Size="1" Step2Size="1" Step3Size="1" Step4Size="1" Step5Size="1" Step6Size="1" Step7Size="1" Step8Size="1" Step9Size="1" Step10Size="1" Step11Size="1" Step12Size="1" Step13Size="1" Step14Size="1" Step15Size="1" Step16Size="1" Step17Size="1" Step18Size="1" Step19Size="1" Step20Size="1" Step21Size="1" Step22Size="1" Step23Size="1" Step24Size="1" Step25Size="1" Step26Size="1" Step27Size="1" Step28Size="1" Step29Size="1" Step30Size="1" Step31Size="1" Step32Size="1" Step33Size="1" Step34Size="1" Step35Size="1" Step36Size="1" Step37Size="1" Step38Size="1" Step39Size="1" Step40Size="1" Step41Size="1" Step42Size="1" Step43Size="1" Step44Size="1" Step45Size="1" Step46Size="1" Step47Size="1" Step48Size="1" Step49Size="1" Step50Size="1" Step51Size="1" Step52Size="1" Step53Size="1" Step54Size="1" Step55Size="1" Step56Size="1" Step57Size="1" Step58Size="1" Step59Size="1" Step60Size="1" Step61Size="1" Step62Size="1" Step63Size="1" Step64Size="1" Step65Size="1" Step66Size="1" Step67Size="1" Step68Size="1" Step69Size="1" Step70Size="1" Step71Size="1" Step72Size="1" Step73Size="1" Step74Size="1" Step75Size="1" Step76Size="1" Step77Size="1" Step78Size="1" Step79Size="1" Step80Size="1" Step81Size="1" Step82Size="1" Step83Size="1" Step84Size="1" Step85Size="1" Step86Size="1" Step87Size="1" Step88Size="1" Step89Size="1" Step90Size="1" Step91Size="1" Step92Size="1" Step93Size="1" Step94Size="1" Step95Size="1" Step96Size="1" Step97Size="1" Step98Size="1" Step99Size="1" Step100Size="1" Step101Size="1" Step102Size="1" Step103Size="1" Step104Size="1" Step105Size="1" Step106Size="1" Step107Size="1" Step108Size="1" Step109Size="1" Step110Size="1" Step111Size="1" Step112Size="1" Step113Size="1" Step114Size="1" Step115Size="1" Step116Size="1" Step117Size="1" Step118Size="1" Step119Size="1" Step120Size="1" Step121Size="1" Step122Size="1" Step123Size="1" Step124Size="1" Step125Size="1" Step126Size="1" Step127Size="1" Step0Level="1" Step1Level="1" Step2Level="1" Step3Level="1" Step4Level="1" Step5Level="0.61428601" Step6Level="1" Step7Level="0.78571397" Step8Level="1" Step9Level="1" Step10Level="1" Step11Level="1" Step12Level="1" Step13Level="1" Step14Level="1" Step15Level="1" Step16Level="1" Step17Level="1" Step18Level="1" Step19Level="1" Step20Level="1" Step21Level="1" Step22Level="1" Step23Level="1" Step24Level="1" Step25Level="1" Step26Level="1" Step27Level="1" Step28Level="1" Step29Level="1" Step30Level="1" Step31Level="1" Step32Level="1" Step33Level="1" Step34Level="1" Step35Level="1" Step36Level="1" Step37Level="1" Step38Level="1" Step39Level="1" Step40Level="1" Step41Level="1" Step42Level="1" Step43Level="1" Step44Level="1" Step45Level="1" Step46Level="1" Step47Level="1" Step48Level="1" Step49Level="1" Step50Level="1" Step51Level="1" Step52Level="1" Step53Level="1" Step54Level="1" Step55Level="1" Step56Level="1" Step57Level="1" Step58Level="1" Step59Level="1" Step60Level="1" Step61Level="1" Step62Level="1" Step63Level="1" Step64Level="1" Step65Level="1" Step66Level="1" Step67Level="1" Step68Level="1" Step69Level="1" Step70Level="1" Step71Level="1" Step72Level="1" Step73Level="1" Step74Level="1" Step75Level="1" Step76Level="1" Step77Level="1" Step78Level="1" Step79Level="1" Step80Level="1" Step81Level="1" Step82Level="1" Step83Level="1" Step84Level="1" Step85Level="1" Step86Level="1" Step87Level="1" Step88Level="1" Step89Level="1" Step90Level="1" Step91Level="1" Step92Level="1" Step93Level="1" Step94Level="1" Step95Level="1" Step96Level="1" Step97Level="1" Step98Level="1" Step99Level="1" Step100Level="1" Step101Level="1" Step102Level="1" Step103Level="1" Step104Level="1" Step105Level="1" Step106Level="1" Step107Level="1" Step108Level="1" Step109Level="1" Step110Level="1" Step111Level="1" Step112Level="1" Step113Level="1" Step114Level="1" Step115Level="1" Step116Level="1" Step117Level="1" Step118Level="1" Step119Level="1" Step120Level="1" Step121Level="1" Step122Level="1" Step123Level="1" Step124Level="1" Step125Level="1" Step126Level="1" Step127Level="1" Step0Offset="0" Step1Offset="0" Step2Offset="0" Step3Offset="0" Step4Offset="0" Step5Offset="0" Step6Offset="0" Step7Offset="0" Step8Offset="0" Step9Offset="0" Step10Offset="0" Step11Offset="0" Step12Offset="0" Step13Offset="0" Step14Offset="0" Step15Offset="0" Step16Offset="0" Step17Offset="0" Step18Offset="0" Step19Offset="0" Step20Offset="0" Step21Offset="0" Step22Offset="0" Step23Offset="0" Step24Offset="0" Step25Offset="0" Step26Offset="0" Step27Offset="0" Step28Offset="0" Step29Offset="0" Step30Offset="0" Step31Offset="0" Step32Offset="0" Step33Offset="0" Step34Offset="0" Step35Offset="0" Step36Offset="0" Step37Offset="0" Step38Offset="0" Step39Offset="0" Step40Offset="0" Step41Offset="0" Step42Offset="0" Step43Offset="0" Step44Offset="0" Step45Offset="0" Step46Offset="0" Step47Offset="0" Step48Offset="0" Step49Offset="0" Step50Offset="0" Step51Offset="0" Step52Offset="0" Step53Offset="0" Step54Offset="0" Step55Offset="0" Step56Offset="0" Step57Offset="0" Step58Offset="0" Step59Offset="0" Step60Offset="0" Step61Offset="0" Step62Offset="0" Step63Offset="0" Step64Offset="0" Step65Offset="0" Step66Offset="0" Step67Offset="0" Step68Offset="0" Step69Offset="0" Step70Offset="0" Step71Offset="0" Step72Offset="0" Step73Offset="0" Step74Offset="0" Step75Offset="0" Step76Offset="0" Step77Offset="0" Step78Offset="0" Step79Offset="0" Step80Offset="0" Step81Offset="0" Step82Offset="0" Step83Offset="0" Step84Offset="0" Step85Offset="0" Step86Offset="0" Step87Offset="0" Step88Offset="0" Step89Offset="0" Step90Offset="0" Step91Offset="0" Step92Offset="0" Step93Offset="0" Step94Offset="0" Step95Offset="0" Step96Offset="0" Step97Offset="0" Step98Offset="0" Step99Offset="0" Step100Offset="0" Step101Offset="0" Step102Offset="0" Step103Offset="0" Step104Offset="0" Step105Offset="0" Step106Offset="0" Step107Offset="0" Step108Offset="0" Step109Offset="0" Step110Offset="0" Step111Offset="0" Step112Offset="0" Step113Offset="0" Step114Offset="0" Step115Offset="0" Step116Offset="0" Step117Offset="0" Step118Offset="0" Step119Offset="0" Step120Offset="0" Step121Offset="0" Step122Offset="0" Step123Offset="0" Step124Offset="0" Step125Offset="0" Step126Offset="0" Step127Offset="0" Step0CC="0" Step1CC="0" Step2CC="0" Step3CC="0" Step4CC="0" Step5CC="0" Step6CC="0" Step7CC="0" Step8CC="0" Step9CC="0" Step10CC="0" Step11CC="0" Step12CC="0" Step13CC="0" Step14CC="0" Step15CC="0" Step16CC="0" Step17CC="0" Step18CC="0" Step19CC="0" Step20CC="0" Step21CC="0" Step22CC="0" Step23CC="0" Step24CC="0" Step25CC="0" Step26CC="0" Step27CC="0" Step28CC="0" Step29CC="0" Step30CC="0" Step31CC="0" Step32CC="0" Step33CC="0" Step34CC="0" Step35CC="0" Step36CC="0" Step37CC="0" Step38CC="0" Step39CC="0" Step40CC="0" Step41CC="0" Step42CC="0" Step43CC="0" Step44CC="0" Step45CC="0" Step46CC="0" Step47CC="0" Step48CC="0" Step49CC="0" Step50CC="0" Step51CC="0" Step52CC="0" Step53CC="0" Step54CC="0" Step55CC="0" Step56CC="0" Step57CC="0" Step58CC="0" Step59CC="0" Step60CC="0" Step61CC="0" Step62CC="0" Step63CC="0" Step64CC="0" Step65CC="0" Step66CC="0" Step67CC="0" Step68CC="0" Step69CC="0" Step70CC="0" Step71CC="0" Step72CC="0" Step73CC="0" Step74CC="0" Step75CC="0" Step76CC="0" Step77CC="0" Step78CC="0" Step79CC="0" Step80CC="0" Step81CC="0" Step82CC="0" Step83CC="0" Step84CC="0" Step85CC="0" Step86CC="0" Step87CC="0" Step88CC="0" Step89CC="0" Step90CC="0" Step91CC="0" Step92CC="0" Step93CC="0" Step94CC="0" Step95CC="0" Step96CC="0" Step97CC="0" Step98CC="0" Step99CC="0" Step100CC="0" Step101CC="0" Step102CC="0" Step103CC="0" Step104CC="0" Step105CC="0" Step106CC="0" Step107CC="0" Step108CC="0" Step109CC="0" Step110CC="0" Step111CC="0" Step112CC="0" Step113CC="0" Step114CC="0" Step115CC="0" Step116CC="0" Step117CC="0" Step118CC="0" Step119CC="0" Step120CC="0" Step121CC="0" Step122CC="0" Step123CC="0" Step124CC="0" Step125CC="0" Step126CC="0" Step127CC="0" StepCCId="-1" ArpeggiatorVersion="2">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 16" Destination="Bypass" Mapper="" ConnectionMode="1" Bypass="0" Inverted="1" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties PresetPath="$Resource/resource/FactoryPresets/EventProcessor/Arpeggiator/Arp Basic/Basic UpDown.preset"/>
            </Arpeggiator>
        </EventProcessors>
        <Inserts>
            <SparkVerb Name="InsertFX1" Bypass="0" ModDepth="0" ModRate="1" Diffusion="0.61799997" DiffusionStart="5" Width="1" RoomSize="20" DecayTime="0.57543999" DecayLow="1" DecayHigh="10" FreqLow="254.64787" FreqHigh="10000.001" Shape="0" Mix="0" Quality="4" Mode="1" HiCut="0" LowCut="1" Rolloff="19999.992" DiffusionOnOff="1" PreDelay="0" MixMode="0" SparkVerbVersion="1">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 15" Destination="Mix" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties PresetPath="$Resource/resource/FactoryPresets/FX/02 - Reverberation/04 - SparkVerb/09 - Shimmer/Shimmer 1.preset"/>
            </SparkVerb>
            <Drive Name="InsertFX3" Bypass="0" DriveAmount="0" Mode="0" Oversampling="0">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 23" Destination="DriveAmount" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
            </Drive>
            <DualDelay Name="InsertFX0" Bypass="0" SyncToHost="1" DelayTime="1.5" LowCut="20" HighCut="6955.9419" PeakFreq="1000" PeakGain="0" PeakQ="1" Feedback="0.48018751" Mix="0" Rotation="84.779999" InputWidth="1" OutputWidth="1" DelayRatio="0.32959688" FeedbackRatio="0" InputRotation="-0.300125" OutputRotation="-0.28812504" ModDepth="5.7362504" ModRate="0.45289761" ModChannelOffset="1" Interpolation="1" DualDelayVersion="1">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 14" Destination="Mix" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties PresetPath="$Resource/resource/FactoryPresets/FX/01 - Delay/07 - Dual Delay/1 Stereo Delay/Sequencer Dots.preset"/>
            </DualDelay>
            <AnalogChorus Name="InsertFX2" Bypass="0" Speed="0.1" Width="0" Intensity="0" TransientEnhancement="0">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="0.65328664" Source="$Program/Macro 21" Destination="Speed" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 21" Destination="Width" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                    <SignalConnection Name="SignalConnection 0" Ratio="0.34999999" Source="$Program/Macro 21" Destination="Intensity" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties PresetPath="$Resource/resource/FactoryPresets/FX/04 - Modulation/05 - Analog Chorus/Nice and Slow.preset"/>
            </AnalogChorus>
            <Maximizer Name="InsertFX4" Bypass="1" Threshold="-6" Attack="0" Lookahead="2" Release="10" Ceiling="-0.1" Knee="0" ReleaseBlend="0.1" SlewRate="20">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 35" Destination="Bypass" Mapper="" ConnectionMode="1" Bypass="0" Inverted="1" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties PresetPath=""/>
            </Maximizer>
        </Inserts>
        <Layers>
            <Layer Name="Layer 0" Bypass="0" BypassInsertFX="0" Gain="0.57547152" Pan="0" Mute="0" MidiMute="0" Solo="0" DisplayName="Osc 1" OutputName="" LowKey="0" HighKey="127" CustomPolyphony="0" PlayMode="0" PortamentoTime="0.029999999" PortamentoCurve="0" PortamentoMode="0" NumVoicesPerNote="1" VelocityCurve="0">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 8" Destination="Gain" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties Color="ffbe88cc"/>
                <ControlSignalSources/>
                <BusRouters/>
                <Keygroups>
                    <Keygroup Name="Keygroup 0" Bypass="0" BypassInsertFX="0" Gain="1" Pan="0" DisplayName="Keygroup 1" OutputName="" ExclusiveGroup="0" LowKey="0" HighKey="127" LowVelocity="1" HighVelocity="127" LowKeyFade="0" HighKeyFade="0" LowVelocityFade="0" HighVelocityFade="0" FadeCurve="2" TriggerMode="0" TriggerSync="0" TriggerRule="0" LatchTrigger="0" FXPostGain="0">
                        <Connections>
                            <SignalConnection Name="AmpEnvMod" Ratio="1" Source="Amp. Env" Destination="Gain" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                            <SignalConnection Name="SignalConnection 0" Ratio="0" Source="$Keygroup/LFO 1" Destination="Gain" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 37" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </SignalConnection>
                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@Alternate" Destination="Pan" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 43" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                </Connections>
                            </SignalConnection>
                        </Connections>
                        <ControlSignalSources>
                            <AnalogADSR Name="Amp. Env" DisplayName="Amp. Env" Bypass="0" AttackTime="0.001" DecayTime="0.050000001" KeyToDecay="0" KeyToAttack="0" VelToDecay="0" Punch="0" VelToAttack="0" DynamicRange="10" SustainLevel="1" ReleaseTime="0.0099999998" ManualTrigger="0" TriggerMode="0" InvertVelocity="0" AttackDecayMode="0"/>
                            <AnalogADSR Name="Analog ADSR 1" DisplayName="Filter Env" Bypass="0" AttackTime="0.001" DecayTime="0.050000001" KeyToDecay="0" KeyToAttack="0" VelToDecay="0" Punch="0" VelToAttack="0" DynamicRange="10" SustainLevel="1" ReleaseTime="0.0099999998" ManualTrigger="0" TriggerMode="0" InvertVelocity="0" AttackDecayMode="0"/>
                            <LFO Name="LFO 1" DisplayName="LFO 1" Bypass="0" SyncToHost="0" DelayTime="0" RiseTime="0" Freq="4.5" Depth="1" Phase="0" WaveFormType="2" Retrigger="1" Bipolar="1" Smooth="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@VoiceParam LinearKeyFollow" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 42" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                </Connections>
                            </LFO>
                        </ControlSignalSources>
                        <Inserts>
                            <MoogFilter Name="InsertFX0" Bypass="0" Freq="20000" Q="0" KeyTracking="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="0" Source="$Keygroup/Analog ADSR 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 3" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="0" Source="@MIDI CC 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 22" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 3" Ratio="0" Source="@ChanAfterTouch" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 24" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 4" Ratio="0" Source="$Keygroup/LFO 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 31" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 2" Destination="Freq" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 13" Destination="Q" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 30" Destination="KeyTracking" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </MoogFilter>
                            <Rez Name="InsertFX1" Bypass="0" Freq="20" Q="0" KeyTracking="0" Mode="1">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 1" Ratio="0" Source="$Keygroup/Analog ADSR 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 53" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="0" Source="@MIDI CC 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 54" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 3" Ratio="0" Source="@ChanAfterTouch" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 55" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 4" Ratio="0" Source="$Keygroup/LFO 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 56" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 50" Destination="Freq" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 51" Destination="Q" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 52" Destination="KeyTracking" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </Rez>
                        </Inserts>
                        <BusRouters/>
                        <Oscillators>
                            <MinBlepGenerator Name="Oscillator 2" Bypass="0" Waveform="1" Pwm="0.5" StartPhase="0" Polarity="0" HardSync="1" HardSyncShift="0" NumOscillators="1" MultiOscSpread="0.1" Stereo="1" PhaseSpread="1" DetuneMode="0" StereoSpread="0" StereoSpreadMode="1" CoarseTune="0" FineTune="0" Gain="1" Pitch="-24" NoteTracking="1" BaseNote="60" DisplayName="Oscillator 2">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Keygroup/LFO 1" Destination="Pwm" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 27" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@UnipolarRandom" Destination="StartPhase" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 34" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="36" Source="@ChanAfterTouch" Destination="HardSyncShift" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 58" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="36" Source="$Keygroup/Analog ADSR 1" Destination="HardSyncShift" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 40" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="36" Source="$Keygroup/LFO 1" Destination="HardSyncShift" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 38" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Keygroup/LFO 1" Destination="MultiOscSpread" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 6" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 32" Destination="MultiOscSpread" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 44" Destination="StereoSpread" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="PitchBendMod" Ratio="2" Source="@PitchBend" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/LFO 1" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 25" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="48" Source="$Keygroup/LFO 1" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 46" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 3" Ratio="48" Source="$Keygroup/Analog ADSR 1" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 48" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 45" Destination="Pitch" Mapper="Mapper 5" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                </Connections>
                            </MinBlepGenerator>
                        </Oscillators>
                    </Keygroup>
                </Keygroups>
            </Layer>
            <Layer Name="Layer 1" Bypass="0" BypassInsertFX="0" Gain="0" Pan="0" Mute="0" MidiMute="0" Solo="0" DisplayName="Osc 2" OutputName="" LowKey="0" HighKey="127" CustomPolyphony="0" PlayMode="0" PortamentoTime="0.029999999" PortamentoCurve="0" PortamentoMode="0" NumVoicesPerNote="1" VelocityCurve="0">
                <Connections>
                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 10" Destination="Gain" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties Color="ffca7d6d"/>
                <ControlSignalSources/>
                <BusRouters/>
                <Keygroups>
                    <Keygroup Name="Keygroup 0" Bypass="0" BypassInsertFX="0" Gain="1" Pan="0" DisplayName="Keygroup 1" OutputName="" ExclusiveGroup="0" LowKey="0" HighKey="127" LowVelocity="1" HighVelocity="127" LowKeyFade="0" HighKeyFade="0" LowVelocityFade="0" HighVelocityFade="0" FadeCurve="2" TriggerMode="0" TriggerSync="0" TriggerRule="0" LatchTrigger="0" FXPostGain="0">
                        <Connections>
                            <SignalConnection Name="AmpEnvMod" Ratio="1" Source="Amp. Env" Destination="Gain" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                            <SignalConnection Name="SignalConnection 0" Ratio="0" Source="$Keygroup/LFO 1" Destination="Gain" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 37" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </SignalConnection>
                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@Alternate" Destination="Pan" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 43" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                </Connections>
                            </SignalConnection>
                        </Connections>
                        <ControlSignalSources>
                            <AnalogADSR Name="Amp. Env" DisplayName="Amp. Env" Bypass="0" AttackTime="0.001" DecayTime="0.050000001" KeyToDecay="0" KeyToAttack="0" VelToDecay="0" Punch="0" VelToAttack="0" DynamicRange="10" SustainLevel="1" ReleaseTime="0.0099999998" ManualTrigger="0" TriggerMode="0" InvertVelocity="0" AttackDecayMode="0"/>
                            <AnalogADSR Name="Analog ADSR 1" DisplayName="Filter Env" Bypass="0" AttackTime="0.001" DecayTime="0.050000001" KeyToDecay="0" KeyToAttack="0" VelToDecay="0" Punch="0" VelToAttack="0" DynamicRange="10" SustainLevel="1" ReleaseTime="0.0099999998" ManualTrigger="0" TriggerMode="0" InvertVelocity="0" AttackDecayMode="0"/>
                            <LFO Name="LFO 1" DisplayName="LFO 1" Bypass="0" SyncToHost="0" DelayTime="0" RiseTime="0" Freq="4.5" Depth="1" Phase="0" WaveFormType="2" Retrigger="1" Bipolar="1" Smooth="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@VoiceParam LinearKeyFollow" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 4" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                </Connections>
                            </LFO>
                        </ControlSignalSources>
                        <Inserts>
                            <MoogFilter Name="InsertFX0" Bypass="0" Freq="20000" Q="0" KeyTracking="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="0" Source="$Keygroup/Analog ADSR 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 3" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="0" Source="@MIDI CC 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 22" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 3" Ratio="0" Source="@ChanAfterTouch" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 24" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 4" Ratio="0" Source="$Keygroup/LFO 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 31" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 2" Destination="Freq" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 13" Destination="Q" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 30" Destination="KeyTracking" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </MoogFilter>
                            <Rez Name="InsertFX1" Bypass="0" Freq="20" Q="0" KeyTracking="0" Mode="1">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 1" Ratio="0" Source="$Keygroup/Analog ADSR 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 53" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="0" Source="@MIDI CC 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 54" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 3" Ratio="0" Source="@ChanAfterTouch" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 55" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 4" Ratio="0" Source="$Keygroup/LFO 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 56" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 50" Destination="Freq" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 51" Destination="Q" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 52" Destination="KeyTracking" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </Rez>
                        </Inserts>
                        <BusRouters/>
                        <Oscillators>
                            <MinBlepGenerator Name="Oscillator 2" Bypass="0" Waveform="1" Pwm="0.5" StartPhase="0" Polarity="0" HardSync="1" HardSyncShift="0" NumOscillators="1" MultiOscSpread="0.1" Stereo="1" PhaseSpread="1" DetuneMode="0" StereoSpread="0" StereoSpreadMode="1" CoarseTune="0" FineTune="0" Gain="1" Pitch="-24" NoteTracking="1" BaseNote="60" DisplayName="Oscillator 2">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Keygroup/LFO 1" Destination="Pwm" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 28" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@UnipolarRandom" Destination="StartPhase" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 34" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="36" Source="$Keygroup/Analog ADSR 1" Destination="HardSyncShift" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 41" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="36" Source="$Keygroup/LFO 1" Destination="HardSyncShift" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 39" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Keygroup/LFO 1" Destination="MultiOscSpread" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 6" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 32" Destination="MultiOscSpread" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 44" Destination="StereoSpread" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="PitchBendMod" Ratio="2" Source="@PitchBend" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/LFO 1" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 25" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 11" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                    <SignalConnection Name="SignalConnection 2" Ratio="1" Source="$Program/Macro 12" Destination="Pitch" Mapper="Mapper 0" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                    <SignalConnection Name="SignalConnection 3" Ratio="48" Source="$Keygroup/LFO 1" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 47" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 4" Ratio="48" Source="$Keygroup/Analog ADSR 1" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 49" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                </Connections>
                            </MinBlepGenerator>
                        </Oscillators>
                    </Keygroup>
                </Keygroups>
            </Layer>
            <Layer Name="Layer 2" Bypass="0" BypassInsertFX="0" Gain="0" Pan="0" Mute="0" MidiMute="0" Solo="0" DisplayName="Noise" OutputName="" LowKey="0" HighKey="127" CustomPolyphony="0" PlayMode="0" PortamentoTime="0.029999999" PortamentoCurve="0" PortamentoMode="0" NumVoicesPerNote="1" VelocityCurve="0">
                <Connections>
                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 36" Destination="Gain" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                </Connections>
                <Properties Color="ffa398e8"/>
                <ControlSignalSources/>
                <BusRouters/>
                <Keygroups>
                    <Keygroup Name="Keygroup 0" Bypass="0" BypassInsertFX="0" Gain="1" Pan="0" DisplayName="Keygroup 1" OutputName="" ExclusiveGroup="0" LowKey="0" HighKey="127" LowVelocity="1" HighVelocity="127" LowKeyFade="0" HighKeyFade="0" LowVelocityFade="0" HighVelocityFade="0" FadeCurve="2" TriggerMode="0" TriggerSync="0" TriggerRule="0" LatchTrigger="0" FXPostGain="0">
                        <Connections>
                            <SignalConnection Name="AmpEnvMod" Ratio="1" Source="Amp. Env" Destination="Gain" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                            <SignalConnection Name="SignalConnection 0" Ratio="0" Source="$Keygroup/LFO 1" Destination="Gain" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 20" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </SignalConnection>
                        </Connections>
                        <ControlSignalSources>
                            <AnalogADSR Name="Amp. Env" DisplayName="Amp. Env" Bypass="0" AttackTime="0.001" DecayTime="0.050000001" KeyToDecay="0" KeyToAttack="0" VelToDecay="0" Punch="0" VelToAttack="0" DynamicRange="10" SustainLevel="1" ReleaseTime="0.0099999998" ManualTrigger="0" TriggerMode="0" InvertVelocity="0" AttackDecayMode="0"/>
                            <AnalogADSR Name="Analog ADSR 1" DisplayName="Filter Env" Bypass="0" AttackTime="0.001" DecayTime="0.050000001" KeyToDecay="0" KeyToAttack="0" VelToDecay="0" Punch="0" VelToAttack="0" DynamicRange="10" SustainLevel="1" ReleaseTime="0.0099999998" ManualTrigger="0" TriggerMode="0" InvertVelocity="0" AttackDecayMode="0"/>
                            <LFO Name="LFO 1" DisplayName="LFO 1" Bypass="0" SyncToHost="0" DelayTime="0" RiseTime="0" Freq="4.5" Depth="1" Phase="0" WaveFormType="2" Retrigger="1" Bipolar="1" Smooth="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="@VoiceParam LinearKeyFollow" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 5" Destination="Ratio" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                        </Connections>
                                    </SignalConnection>
                                </Connections>
                            </LFO>
                        </ControlSignalSources>
                        <Inserts>
                            <MoogFilter Name="InsertFX0" Bypass="0" Freq="20000" Q="0" KeyTracking="0">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 0" Ratio="0" Source="$Keygroup/Analog ADSR 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 3" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="0" Source="@MIDI CC 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 22" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 3" Ratio="0" Source="@ChanAfterTouch" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 24" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 4" Ratio="0" Source="$Keygroup/LFO 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 18" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 1" Ratio="1" Source="$Program/Macro 2" Destination="Freq" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 13" Destination="Q" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 30" Destination="KeyTracking" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </MoogFilter>
                            <Rez Name="InsertFX1" Bypass="0" Freq="20" Q="0" KeyTracking="0" Mode="1">
                                <Connections>
                                    <SignalConnection Name="SignalConnection 1" Ratio="0" Source="$Keygroup/Analog ADSR 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 53" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 2" Ratio="0" Source="@MIDI CC 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 54" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 3" Ratio="0" Source="@ChanAfterTouch" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 55" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 4" Ratio="0" Source="$Keygroup/LFO 1" Destination="Freq" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0">
                                        <Connections>
                                            <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 19" Destination="Ratio" Mapper="Mapper 1" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                        </Connections>
                                    </SignalConnection>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 50" Destination="Freq" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 51" Destination="Q" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                    <SignalConnection Name="SignalConnection 0" Ratio="1" Source="$Program/Macro 52" Destination="KeyTracking" Mapper="" ConnectionMode="1" Bypass="0" Inverted="0" Offset="0" SignalConnectionVersion="1"/>
                                </Connections>
                            </Rez>
                        </Inserts>
                        <BusRouters/>
                        <Oscillators>
                            <NoiseOscillator Name="Oscillator" Bypass="0" Value="0" NoiseType="6" Stereo="0" CoarseTune="0" FineTune="0" Gain="1" Pitch="0.088500001" NoteTracking="1" BaseNote="60" DisplayName="Oscillator 1">
                                <Connections>
                                    <SignalConnection Name="PitchBendMod" Ratio="2" Source="@PitchBend" Destination="Pitch" Mapper="" ConnectionMode="0" Bypass="0" Inverted="0"/>
                                </Connections>
                            </NoiseOscillator>
                        </Oscillators>
                    </Keygroup>
                </Keygroups>
            </Layer>
        </Layers>
    </Program>
</UVI4>
